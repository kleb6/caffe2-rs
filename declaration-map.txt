[
    {
      "caffe2-blob": [
        "TensorTypes",
        "tensor_gpu_test",
        "tensor_gpu_death_test",
        "tensor_construction",
        "tensor_test",
        "BlobTestFoo",
        "BlobTestBar",
        "BlobTestNonDefaultConstructible",
        "BlobTestFooSerializer",
        "BlobTestFooDeserializer",
        "BlobTest_Blob",
        "BlobTest_BlobUninitialized",
        "BlobTest_BlobWrongType",
        "BlobTest_BlobReset",
        "BlobTest_BlobMove",
        "BlobTest_BlobNonConstructible",
        "BlobTest_BlobShareExternalPointer",
        "BlobTest_BlobShareExternalObject",
        "BlobTest_StringSerialization",
        "TensorNonTypedTest_TensorChangeType",
        "TensorNonTypedTest_NonDefaultConstructible",
        "TensorCPUTest",
        "TensorCPUDeathTest",
        "TensorTypes",
        "TensorCPUTest_TensorInitializedEmpty",
        "TensorCPUTest_TensorInitializedNonEmpty",
        "TensorCPUTest_TensorInitializedZeroDim",
        "TensorCPUTest_TensorResizeZeroDim",
        "TensorCPUTest_TensorInitializedScalar",
        "TensorCPUTest_TensorAlias",
        "TensorCPUTest_TensorShareDataRawPointer",
        "TensorCPUTest_TensorShareDataRawPointerWithMeta",
        "TensorCPUTest_TensorAliasCanUseDifferentShapes",
        "TensorCPUTest_NoLongerAliassAfterNumelChanges",
        "TensorCPUTest_NoLongerAliasAfterFreeMemory",
        "TensorCPUTest_KeepOnShrink",
        "TensorCPUTest_MaxKeepOnShrink",
        "TensorCPUDeathTest_CannotAccessRawDataWhenEmpty",
        "TensorCPUDeathTest_CannotAccessDataWhenEmpty",
        "TensorTest_TensorNonFundamentalType",
        "TensorTest_TensorNonFundamentalTypeClone",
        "TensorTest_Tensor64BitDimension",
        "TensorTest_UndefinedTensor",
        "TensorTest_CopyAndAssignment",
        "TensorDeathTest_CannotCastDownLargeDims",
        "test_serialization_with_type",
        "TensorTest_TensorSerialization_CustomType",
        "TensorTest_Half",
        "TensorTest_TensorFactory",
        "QTensorTest_QTensorSerialization",
        "StringMap",
        "VectorCursor",
        "VectorDB",
        "TypedTensorTest",
        "TensorDataTypes",
        "TypedTensorTest_BigTensorSerialization",
        "DummyType",
        "DummyTypeSerializer",
        "DummyTypeDeserializer",
        "ContentChunks_Serialization",
        "CustomChunkSize_BigTensorSerialization",
        "QTensor_QTensorSizingTest",
        "BlobTest_CastingMessage",
        "TensorConstruction_UninitializedCopyTest",
        "TensorConstruction_CopyConstructorTest",
        "TensorConstruction_MoveAssignmentOpTest",
        "TensorSerialization_MistakenlySerializingDtypeUninitializedTensor",
        "create_proto_with_int_32data",
        "test_data_type",
        "BlobStatGetter",
        "BlobStatRegistrar",
        "BlobStatRegistry",
        "register_blob_stat_getter",
        "blob_is_int_8tensor_cputype",
        "blob_is_tensor_type",
        "blob_set_tensor",
        "get_sized_tensor_with_options",
        "blob_get_mutable_tensor_with_options",
        "xBlob_get_mutable_tensor",
        "blob_get_mutable_tensor",
        "blob_get_tensor",
        "blob_get_tensor_or_undefined"
      ]
    },
    {
      "caffe2-common": [
        "CommonTest_TestStoi",
        "CommonTest_TestStod",
        "CUDNN_VERSION",
        "cudnn_version_min",
        "cudnn_get_error_string",
        "cudnn_enforce",
        "cudnn_check",
        "cudnn_compiled_version",
        "cudnn_runtime_version",
        "check_cudnn_versions",
        "CudnnTypeWrapper",
        "impl_cudnn_type_wrapper",
        "get_cudnn_tensor_format",
        "CudnnTensorDescWrapper",
        "CudnnFilterDescWrapper",
        "print_cudnn_info",
        "CaffeMap",
        "dynamic_cast_if_rtti",
        "SkipIndices",
        "has_cuda_runtime",
        "has_hip_runtime",
        "set_cuda_runtime_flag",
        "set_hip_runtime_flag",
        "kFp16CUDADevicePropMajor",
        "kFp16CUDADevicePropMajor",
        "CAFFE2_CUDA_MAX_PEER_SIZE",
        "CAFFE2_CUDA_PTRATTR_MEMTYPE",
        "CAFFE2_CUDA_PTRATTR_MEMTYPE",
        "cuda_version",
        "has_cudaGPU",
        "cuda_enforce",
        "cuda_check",
        "cuda_driverapi_enforce",
        "cuda_driverapi_check",
        "cublas_enforce",
        "cublas_check",
        "curand_enforce",
        "curand_check",
        "cuda_1d_kernel_loop",
        "cuda_2d_kernel_loop",
        "CAFFE_CUDA_NUM_THREADS",
        "CAFFE_CUDA_NUM_THREADS_2D_DIMX",
        "CAFFE_CUDA_NUM_THREADS_2D_DIMY",
        "CAFFE_MAXIMUM_NUM_BLOCKS",
        "CAFFE_MAXIMUM_NUM_BLOCKS_2D_DIMX",
        "CAFFE_MAXIMUM_NUM_BLOCKS_2D_DIMY",
        "kCUDAGridDimMaxX",
        "kCUDAGridDimMaxY",
        "kCUDAGridDimMaxZ",
        "caffe_get_blocks",
        "caffe_get_blocks_2d",
        "SimpleArray",
        "kCUDATensorMaxDims",
        "dispatch_function_by_value_with_type_1",
        "dispatch_function_by_value_with_type_2",
        "dispatch_function_by_value_with_type_3",
        "num_cuda_devices",
        "gDefaultGPUID",
        "set_defaultGPUID",
        "get_defaultGPUID",
        "caffe_cuda_get_device",
        "caffe_cuda_set_device",
        "get_gpuid_for_pointer",
        "CudaDevicePropWrapper",
        "get_device_property",
        "device_query",
        "get_cuda_peer_access_pattern",
        "tensor_core_available",
        "cublas_get_error_string",
        "curand_get_error_string",
        "CudaRuntimeFlagFlipper"
      ]
    },
    {
      "caffe2-context": [
        "CUDAContext",
        "CudaMemoryPoolType",
        "ThreadLocalCUDAObjects",
        "get_cuda_memory_pool_type",
        "CPUContextTest_TestAllocAlignment",
        "RandGenType",
        "RandGenType",
        "CPUContext",
        "random_number_seed",
        "copy_bytes_impl",
        "copy_bytes_wrapper",
        "CUDATest_HasCudaRuntime",
        "CUDAContextTest_TestAllocDealloc",
        "CUDAContextTest_TestSetGetDeviceWithoutCaffeMode",
        "CUDAContextTest_MemoryPoolAllocateDealloc",
        "get_stream_for_handle",
        "CUDAContextTest_TestSameThreadSameObject",
        "CUDAContextTest_TestSameThreadTempObject",
        "CUDAContextTest_TestSameThreadDifferntObjectIfDifferentDevices",
        "test_get_stream_address",
        "BaseContext",
        "register_context",
        "create_context"
      ]
    },
    {
      "caffe2-db": [
        "Mode",
        "Cursor",
        "Transaction",
        "DB",
        "register_caffe2_db",
        "createDB",
        "dBExists",
        "DBReader",
        "DBReaderSerializer",
        "DBReaderDeserializer",
        "MiniDBCursor",
        "MiniDBTransaction",
        "MiniDB"
      ]
    },
    {
      "caffe2-env": [
      ]
    },
    {
      "caffe2-event": [
        "CPUEventWrapper",
        "event_createcpu",
        "event_recordcpu",
        "event_finishcpu",
        "event_waitcpucpu",
        "event_querycpu",
        "event_error_messagecpu",
        "event_set_finishedcpu",
        "event_can_schedulecpu",
        "event_resetcpu",
        "MaxDeviceTypes",
        "EventStatus",
        "EventCreateFunction",
        "EventRecordFunction",
        "EventWaitFunction",
        "EventFinishFunction",
        "EventQueryFunction",
        "EventErrorMessageFunction",
        "EventSetFinishedFunction",
        "EventResetFunction",
        "EventCallbackFunction",
        "EventSetCallbackFunction",
        "Event",
        "EventCreateFunctionRegisterer",
        "EventRecordFunctionRegisterer",
        "EventWaitFunctionRegisterer",
        "EventQueryFunctionRegisterer",
        "EventErrorMessageFunctionRegisterer",
        "EventSetFinishedFunctionRegisterer",
        "EventSetCallbackFunctionRegisterer",
        "EventFinishFunctionRegisterer",
        "EventResetFunctionRegisterer",
        "kNoError",
        "event_createcpu",
        "event_recordcpu",
        "event_finishcpu",
        "event_waitcpucpu",
        "event_querycpu",
        "event_error_messagecpu",
        "event_set_finishedcpu",
        "event_set_callbackcpu",
        "event_resetcpu",
        "EventCPUTest_EventBasics",
        "EventCPUTest_EventErrors",
        "EventCUDATest_EventBasics",
        "CudaEventWrapper",
        "kNoError",
        "event_createCUDA",
        "event_recordCUDA",
        "event_finishCUDA",
        "event_waitCUDACUDA",
        "event_waitCPUCUDA",
        "event_waitCUDACPU",
        "event_queryCUDA",
        "event_error_messageCUDA",
        "event_set_finishedCUDA",
        "event_resetCUDA"
      ]
    },
    {
      "caffe2-export": [
        "C10OperatorWrapper",
        "create_c10operator_wrapper",
        "export_c10_op_to_caffe2_cpu",
        "export_c10_op_to_caffe2_cuda",
        "export_c10_op_to_caffe2_hip",
        "export_c10_op_to_caffe2_cpu",
        "export_c10_op_to_caffe2_cuda",
        "export_c10_op_to_caffe2_hip",
        "PREALLOCATED_OUTPUT_ARGNAME",
        "CallCaffe2OpFunc",
        "call_caffe2_op",
        "call_caffe2_op_from_c10",
        "call_caffe2_op_from_c10_default_schema",
        "make_function_schema_for_c10",
        "c10_declare_export_caffe2_op_to_c10",
        "c10_export_caffe2_op_to_c10_schema_only",
        "c10_export_caffe2_op_to_c10_cpu_kernel_only",
        "c10_export_caffe2_op_to_c10_cpu",
        "c10_export_caffe2_op_to_c10_cuda",
        "c10_export_caffe2_op_to_c10_hip",
        "c10_declare_export_caffe2_op_to_c10",
        "c10_export_caffe2_op_to_c10_schema_only",
        "c10_export_caffe2_op_to_c10_cpu_kernel_only",
        "c10_export_caffe2_op_to_c10_cpu",
        "c10_export_caffe2_op_to_c10_cuda"
      ]
    },
    {
      "caffe2-graph": [
        "counter",
        "GraphDummyOp",
        "compare_netdefs",
        "GraphTest_TestGenerateGraphChain",
        "GraphTest_TestGenerateGraphChainInPlace",
        "GraphTest_TestGenerateGraphBranch",
        "GraphTest_TestReusedInputs",
        "GraphTest_TestGetPerimeter",
        "Node",
        "Graph",
        "add_op",
        "match_strings"
      ]
    },
    {
      "caffe2-histogram": [
        "OutputColumnMaxHistogramObserver",
        "HistogramObserverInfo",
        "HistogramObserver",
        "HistogramNetObserver",
        "OutputColumnMaxHistogramNetObserver"
      ]
    },
    {
      "caffe2-ideep": [
        "IDEEPLRNOp",
        "IDEEPLRNGradientOp",
        "IDEEPInt8GivenTensorFillOp",
        "IDEEPInt8GivenIntTensorFillOp",
        "SkipOutputCopyDefault",
        "IDEEPFallbackOp",
        "IDEEPInt8ConvOp",
        "IDEEPInt8ConvReluOp",
        "IDEEPInt8ConvSumOp",
        "IDEEPInt8ConvSumReluOp",
        "IDEEPInt8DequantizeOp",
        "IDEEPInt8PoolOp",
        "copy_bytes_wrapper",
        "IDEEPReshapeOp",
        "IDEEPShapeOp",
        "IDEEPNHWC2NCHWOp",
        "IDEEPNCHW2NHWCOp",
        "IDEEPCreateBlobsQueueOp",
        "IDEEPSafeEnqueueBlobsOp",
        "FallbackOp",
        "IDEEPExpandDimsOp",
        "IDEEPSqueezeOp",
        "IDEEPContext",
        "RandGenType",
        "IDEEPInt8QuantizeOp",
        "IDEEPConvPoolOpBase",
        "IDEEPInt8ReluOp",
        "use_ideep_def_aliases",
        "IDEEPInt8FullyConnectedOp",
        "register_ideep_operator_creator",
        "register_ideep_operator",
        "register_ideep_operator_with_engine",
        "register_ideep_operator_str",
        "register_ideep_compare_operator",
        "IDEEPOperator",
        "use_ideep_operator_functions",
        "USE_SIMPLE_IDEEP_CTOR_DTOR",
        "convert_scales",
        "canonical_dims",
        "IDEEPTransposeOp",
        "FALLBACK_OP",
        "IDEEPConcatOp",
        "IDEEPSplitOp",
        "IDEEPSpatialBNOp",
        "IDEEPSpatialBNGradientOp",
        "FALLBACK_SUM",
        "FALLBACK_ADD",
        "IDEEPSumOp",
        "IDEEPConvTransposeOp",
        "IDEEPConvTransposeGradientOp",
        "momentum_sgd_update",
        "IDEEPMomentumSGDOp",
        "IDEEPMomentumSGDUpdateOp",
        "adam_ideep_update",
        "adam_ideep_compute",
        "adam_ideep_compute_output_grad",
        "IDEEPAdamOp",
        "IDEEPReluOp",
        "IDEEPReluGradientOp",
        "IDEEPSigmoidOp",
        "IDEEPSigmoidGradientOp",
        "IDEEPDropoutOp",
        "IDEEPDropoutGradientOp",
        "IDEEPInt8SumReluOp",
        "IDEEPConvTransposeUnpoolBase",
        "IDEEPConvOp",
        "IDEEPConvFusionOp",
        "IDEEPConvGradientOp",
        "IDEEPChannelShuffleOp",
        "ChannelShuffleGradientOp",
        "CopyCPUToIDEEPOp",
        "IDEEPCopyOp",
        "CopyIDEEPToCPUOp",
        "IDEEPWeightedSumOp",
        "IDEEPPoolOp",
        "IDEEPPoolGradientOp",
        "IDEEPFullyConnectedOp",
        "IDEEPFullyConnectedGradientOp"
      ]
    },
    {
      "caffe2-image": [
        "ImageInputOpLabelType",
        "ScaleJitterType",
        "BoundingBox",
        "PerImageArg",
        "ImageInputOp",
        "crop_transpose_image",
        "transform_image",
        "random_sized_cropping",
        "transform_on_gpu"
      ]
    },
    {
      "caffe2-init": [
        "quit_if_feature_unsupported",
        "warn_if_feature_unused",
        "caffe_2check_intrinsics_features",
        "test_init_function",
        "test_fail_init_function",
        "InitTest_TestInitFunctionHasRun",
        "InitTest_CanRerunGlobalInit",
        "late_register_init_function",
        "late_register_early_init_function",
        "late_register_fail_init_function",
        "caffe_2set_open_mpthreads",
        "caffe_2set_mklthreads",
        "InitFunction",
        "Caffe2InitializeRegistry",
        "InitRegisterer",
        "register_caffe2_init_function",
        "register_caffe2_early_init_function",
        "GlobalInitIsCalledGuard",
        "State",
        "global_init_state",
        "global_init_already_run",
        "global_init",
        "global_init_nocmdline",
        "caffe_2set_denormals"
      ]
    },
    {
      "caffe2-mem": [
        "run_schema_check",
        "optimize_inference_net",
        "ComputeBlobRecyclingForDag"
      ]
    },
    {
      "caffe2-miopen": [
        "MIOPEN_VERSION",
        "miopen_get_error_string",
        "miopen_enforce",
        "miopen_check",
        "miopen_compiled_version",
        "miopen_runtime_version",
        "check_miopen_versions",
        "miopenTypeWrapper",
        "miopenTypeWrapperF32",
        "miopenTypeWrapperHalf",
        "miopenTensorDescWrapper",
        "MIOPENActivationOpBase",
        "MIOPENActivationOp",
        "MIOPENActivationGradientOp",
        "MIOpenWorkspace",
        "MIOpenState",
        "SyncedMIOPENState",
        "PerGPUMIOPENStates",
        "MIOPENWrapper",
        "CAFFE2_COMPILE_TIME_MAX_MIOPEN_STATES",
        "TensorDescriptors",
        "RecurrentBaseOp",
        "use_recurrent_base_functions",
        "RecurrentOp",
        "RecurrentParamOpMode",
        "RecurrentParamAccessOp",
        "RecurrentGradientOp"
      ]
    },
    {
      "caffe2-module": [
        "ModuleSchema",
        "caffe2_module",
        "g_module_change_mutex",
        "mutable_current_modules",
        "current_module_handles",
        "current_modules",
        "has_module",
        "load_module",
        "Caffe2ModuleTestStaticDummyOp",
        "ModuleTest_StaticModule",
        "ModuleTest_DynamicModule"
      ]
    },
    {
      "caffe2-net": [
        "AsyncSchedulingNet",
        "TracerEvent",
        "TracingField",
        "TracingMode",
        "TracingConfig",
        "Tracer",
        "TracerGuard",
        "trace_name_concatenate",
        "trace_anonymous_name",
        "trace_event_init",
        "trace_event",
        "trace_event_if",
        "get_counter_for_net_name",
        "extract_shard_id",
        "get_unique_shard_id",
        "is_traceable_net_name",
        "has_enable_tracing_flag",
        "get_tracing_config_from_net",
        "create",
        "start_iter",
        "NetObserver",
        "NetObserverCreator",
        "NetBase",
        "NetBaseTrait",
        "ExecutorHelper",
        "register_net_creator",
        "register_net",
        "kSimpleNet",
        "get_net_observer_creators",
        "default_overrides",
        "apply_potential_executor_override",
        "add_global_net_observer_creator",
        "clear_global_net_observers",
        "create_net",
        "AsyncTask",
        "NetSimpleRefCountTestOp",
        "SimpleRefCountNet",
        "counter",
        "NetTestDummyOp",
        "create_net_test_helper",
        "NetTest_ConstructionNoDeclaredInputOutput",
        "NetTest_ConstructionDeclaredInput",
        "NetTest_ConstructionDeclaredOutput",
        "NetTest_DeclaredInputInsufficient",
        "NetDeathTest_DeclaredOutputNotMet",
        "test_execution",
        "check_chaining_and_run",
        "check_num_chains_and_run",
        "NetTest_DISABLED_ChainingForLinearModel",
        "NetTest_DISABLED_ChainingForFork",
        "NetTest_DISABLED_ChainingForForkJoin",
        "NetTest_DISABLED_ChainingForwardBackward",
        "NetTest_DISABLED_ChainingForHogwildModel",
        "NetTest_DISABLED_FailingOperator",
        "kTestPoolSize",
        "ExecutorHelperDummyOp",
        "NetTest_OperatorWithExecutorHelper",
        "NetTest_DISABLED_OperatorWithDisabledEvent",
        "NetTest_ExecutorOverride",
        "NetTest_AsyncEmptyNet",
        "NetTest_DISABLED_RunAsyncFailure",
        "NetTest_NoTypeNet",
        "NotFinishingOp",
        "NetTest_PendingOpsAndNetFailure",
        "AsyncErrorOp",
        "async_error_net",
        "NetTest_AsyncErrorOpTest",
        "NetTest_AsyncErrorTimingsTest",
        "SyncErrorOp",
        "chain_error_net",
        "NetTest_ChainErrorTest",
        "test_prof_dagnet_error_case",
        "ParentCounter",
        "AsyncTaskFuture",
        "IndividualMetrics",
        "SimpleNet",
        "pair_larger_than",
        "DummySyncOp",
        "DummyAsyncOp",
        "DagUtilTestContext",
        "print_chains",
        "DagUtilTest_Empty",
        "DagUtilTest_AllSync",
        "DagUtilTest_AllAsync",
        "DagUtilTest_Mixed0",
        "DagUtilTest_Mixed1",
        "AsyncTaskGraphBase",
        "AsyncTaskGraph",
        "NetTestDummyOp",
        "test_execution",
        "check_chaining_and_run",
        "test_extract_shard_id",
        "NetAsyncTracingTest_ExtractShardId",
        "NetAsyncTracingTest_EveryKIteration",
        "NetAsyncTracingTest_GlobalTimeSlice",
        "OperatorNode",
        "OpGraphNode",
        "ExecutionChains",
        "prune",
        "prune_op_node_graph",
        "update_operator_nodes",
        "compute_chains",
        "compute_groups",
        "single_chains",
        "prepare_operator_nodes",
        "prepare_chain_graph_nodes",
        "ExecutionOptions",
        "AsyncNetCancelled",
        "PoolsMap",
        "AsyncNetBase",
        "AsyncNetExecutorHelper",
        "get_async_net_thread_pool",
        "PoolsMap",
        "ParallelNet",
        "ParallelNetExecutorHelper",
        "get_async_task_graph"
      ]
    },
    {
      "caffe2-nomnigraph": [
        "NodeType",
        "Criteria",
        "TestGraph",
        "TestMatchGraph",
        "TestMatchPredicate",
        "reset",
        "test_match_predicate",
        "any",
        "tree",
        "non_terminal",
        "test_graph_node_printer",
        "TestGraph_NodeRef",
        "DataFlowTestGraph",
        "DataFlowTestGraphCriteria",
        "get_in_node",
        "is_subgraph_match",
        "SubgraphMatcher_IsNodeMatch",
        "SubgraphMatcher_IsSubtreeMatch",
        "SubgraphMatcher_IsSubtreeMatchRepeated",
        "SubgraphMatcher_DagMatching",
        "SubgraphMatcher_DagMatchingMultiEdges",
        "SubgraphMatcher_DagMatchingRandomLargeGraph",
        "SubgraphMatcher_IsSubtreeMatchRealistic",
        "SubgraphMatcher_ReplaceGraphRealistic",
        "TestClass",
        "NNEquality",
        "A",
        "C",
        "TestRandom",
        "to_string",
        "create_graph",
        "create_graph_with_cycle",
        "bb_printer",
        "cfg_edge_printer",
        "nn_printer",
        "create_test_node",
        "Edge",
        "EmptyEdgeData",
        "NomNode",
        "Subgraph",
        "SubgraphType",
        "NodeRef",
        "EdgeRef",
        "NomGraph",
        "Match_Basic",
        "BasicBlock",
        "Program",
        "ControlFlowGraphImpl",
        "BBT",
        "BasicBlockType",
        "BasicBlockRef",
        "ControlFlowGraph",
        "delete_node",
        "Predicate",
        "kStarCount",
        "MatchPredicate",
        "SubgraphMatchResultType",
        "ReplaceGraphOperation",
        "MatchGraph",
        "MatchNodeMap",
        "SubgraphMatchResult",
        "AnnotationKind",
        "Annotation",
        "NNKind",
        "NNLayout",
        "NeuralNetOperator",
        "NNDataKind",
        "NeuralNetData",
        "NeuralNetDataTrait",
        "DataType",
        "Layout",
        "NomTensor",
        "nomnigraph_define_nn_rtti",
        "While",
        "NNPhi",
        "GenericOperator",
        "NNGraph",
        "NNSubgraph",
        "NNCFGraph",
        "NNModule",
        "inheritedFrom",
        "is_impl",
        "is",
        "get_impl",
        "get",
        "node_iterator",
        "filter",
        "data_iterator",
        "insert_op",
        "convert_node",
        "has_producer",
        "get_producer",
        "has_consumer",
        "get_consumers",
        "has_inputs",
        "get_inputs_from_node",
        "get_outputs_from_node",
        "get_inputs_from_subgraph",
        "get_outputs_from_subgraph",
        "get_name",
        "replace_producer",
        "replace_all_uses_with",
        "replace_as_consumer",
        "create_output",
        "create_operator",
        "coalesce_inserted_data_dependencies",
        "NodeHelper",
        "NNMatchGraph",
        "NNMatchPredicate",
        "has_single_output_and_consumer",
        "has_unique_consumer",
        "match_external_tensor_node",
        "ValueKind",
        "Value",
        "Data",
        "Opcode",
        "Instruction",
        "Terminator",
        "Branch",
        "Return",
        "Phi",
        "has_producer",
        "get_producer",
        "has_consumer",
        "get_consumers",
        "has_inputs",
        "get_inputs",
        "get_outputs",
        "get_name",
        "get_subgraph_inputs",
        "get_subgraph_outputs",
        "replace_producer",
        "replace_all_uses_with",
        "replace_as_consumer",
        "create_output",
        "get_tracked_nodes",
        "coalesce_inserted_data_dependencies_helper",
        "coalesce_inserted_data_dependencies",
        "has_single_output_and_consumer",
        "has_unique_consumer",
        "match_external_tensor_node",
        "Tarjans_Simple",
        "Tarjans_WithEdgeStorage",
        "Tarjans_DAG",
        "Tarjans_Cycle",
        "Tarjans_Random",
        "NodeRefT",
        "TopoSort",
        "TopoSortResultStatus",
        "TopoSortResult",
        "topo_sort",
        "NeuralNetGraph_ReplaceGraph",
        "reachable",
        "dominator_tree",
        "immediate_dominator_map",
        "dominance_frontier_map",
        "induce_edges",
        "create_subgraph",
        "Relu",
        "Conv",
        "ConvRelu",
        "ConvTranspose",
        "AveragePool",
        "AveragePoolRelu",
        "MaxPool",
        "MaxPoolRelu",
        "Sum",
        "SumRelu",
        "Send_",
        "Receive",
        "BatchNormalization",
        "Clip",
        "FC",
        "GivenTensorFill",
        "Concat",
        "Softmax",
        "ChannelShuffle",
        "Add",
        "Reshape",
        "Flatten",
        "CopyToOpenCL",
        "CopyFromOpenCL",
        "NCHW2NHWC",
        "NHWC2NCHW",
        "Declare",
        "Export",
        "GraphT",
        "TopoSortT",
        "TopoSort_Simple",
        "TopoSort_DAG",
        "TopoSort_Cycle1",
        "DominatorTree_Test1",
        "DominatorTree_Test2",
        "Subgraph_InduceEdges",
        "Subgraph_InduceEdgesCycle",
        "BinaryMatch_NoMatch",
        "BinaryMatch_AllMatch",
        "BinaryMatch_EmptyGraph",
        "BinaryMatch_Basic",
        "BinaryMatch_RemovedMiddleNode",
        "NodeEqualityDefault",
        "EqualityClassDefault",
        "Match",
        "DotGenerator",
        "NodePrinter",
        "EdgePrinter",
        "convert_graph_to_dot_string",
        "convert_graph_to_dot_string_and_annotate_subgraph_clusters",
        "convert_subgraph_to_dot_string",
        "convert_to_dot_record_string",
        "nom_require_or_",
        "nom_require_or_cont",
        "nom_require_or_break",
        "nom_require_or_ret_null",
        "nom_require_or_ret_false",
        "nom_require_or_ret_true",
        "nom_require_or_ret",
        "StorageType",
        "Notifier",
        "NotifierCallback",
        "EdgeWrapper",
        "WrappedGraph",
        "WrappedSubgraph",
        "NodeWrapper",
        "GraphWrapper",
        "HasEdgeWrapper",
        "Tarjans",
        "tarjans",
        "binary_match",
        "TestGraph",
        "Basic_CreateNodeAndEdge",
        "Basic_DeleteNode",
        "Basic_DeleteEdge",
        "Basic_ReplaceEdges",
        "Basic_HasNode",
        "Basic_Moves",
        "Basic_MoveSubgraph",
        "Basic_DotGenerator"
      ]
    },
    {
      "caffe2-observer": [
        "ObserverBase",
        "Observable",
        "Observer",
        "ProfileObserver",
        "ProfileCounter",
        "ProfileOperatorObserver",
        "counter",
        "DummyObserver",
        "ObsTestDummyOp",
        "create_net_test_helper",
        "ObserverTest_TestNotify",
        "ObserverTest_TestUniqueMap",
        "ObserverTest_TestNotifyAfterDetach",
        "ObserverTest_TestDAGNetBase",
        "ObserverTest_TestMultipleNetBase",
        "TimeCounter",
        "TimeOperatorObserver",
        "TimeObserver",
        "SleepOp",
        "create_net_test_helper",
        "OperatorAttachingNetObserver",
        "RunCountOperatorObserver",
        "RunCountNetObserver"
      ]
    },
    {
      "caffe2-operator": [
        "GradientWrapper",
        "GradientOpsMeta",
        "GradientMakerBase",
        "oGradient",
        "ThrowInTheTowelIfGradientIsCalled",
        "GradientNotImplementedYet",
        "register_gradient",
        "register_gradient_str",
        "register_gradient",
        "register_gradient_str",
        "no_gradient",
        "should_not_do_gradient",
        "gradient_not_implemented_yet",
        "get_gradient_for_op",
        "OperatorObserver",
        "kNoNetPositionSet",
        "OperatorStorage",
        "op_single_arg",
        "input_tags",
        "output_tags",
        "RunOnDevice",
        "CheckIsInputOutputAlias",
        "CheckInputIsType",
        "CheckOutputIsType",
        "GetType",
        "GetInputs",
        "GetOutputs",
        "GetInputTensorShapes",
        "GetInputAtIndex",
        "GetXOutput",
        "SetOutputTensor",
        "GetOutputAtIndex_Legacy",
        "GetOutputAtIndexTensorCopy",
        "Finish",
        "WaitEvent",
        "WaitEvents",
        "Wait",
        "Run",
        "RunStream",
        "CheckStream",
        "CheckAsync",
        "Cancel",
        "CancelAsyncCallback",
        "DebugInfoString",
        "GetDebugDef",
        "SetDebugDef",
        "CheckHasDebugDef",
        "CheckNetPosition",
        "SetNetPosition",
        "GetDeviceOption",
        "GetEvent",
        "GetEventMut",
        "ResetEvent",
        "DisableEvent",
        "CheckEventDisabled",
        "SyncDeviceBarrierForObservers",
        "CheckStreamFree",
        "GetContext",
        "GetContextMut",
        "RecordEvent",
        "RecordLastFailedOpNetPosition",
        "AnnotateEngine",
        "GetEngine",
        "GetVectorFromIValueList",
        "CheckLegacyOperator",
        "GetFunctionSchema",
        "GetSingleArgument",
        "MoveNewstyleOutputs",
        "GetRepeatedArgument",
        "AddRelatedBlobInfo",
        "CheckArgumentWithName",
        "CheckHasSingleArgumentOfType",
        "SetEventFinished",
        "GetErrorMessage",
        "RunAsyncStream",
        "GetOutputAtIndex",
        "GetInputBlob",
        "GetOutputBlob",
        "CheckInputSize",
        "CheckOutputSize",
        "Operator",
        "GetExecutorHelper",
        "SetExecutorHelper",
        "use_dispatch_helper",
        "FixedValues",
        "TensorTypes",
        "GenericTensorImplementation",
        "TensorTypes2",
        "DispatchHelper",
        "define_tensor_types_dispatcher",
        "OperatorRegistry",
        "RegistryFunction",
        "DeviceTypeRegisterer",
        "caffe_register_device_type",
        "register_cpu_operator_creator",
        "register_cpu_operator",
        "register_cpu_operator_str",
        "register_cpu_operator_with_engine",
        "register_cpu_gradient_operator",
        "register_cpu_gradient_operator",
        "register_cpu_gradient_operator_with_engine",
        "register_cpu_gradient_operator_with_engine",
        "register_cuda_operator_creator",
        "register_cuda_operator",
        "register_cuda_operator_str",
        "register_cuda_operator_with_engine",
        "register_cudnn_operator",
        "register_hip_operator_creator",
        "register_hip_operator",
        "register_hip_operator_str",
        "register_hip_operator_with_engine",
        "register_miopen_operator",
        "StaticLinkingProtector",
        "UnsupportedOperatorFeature",
        "operator_needs_feature",
        "EnginePrefType",
        "PerOpEnginePrefType",
        "GlobalEnginePrefType",
        "ExternalTensorDescriptor",
        "ExternalTensorFunctionsBase",
        "register_external_tensor_functions",
        "create_external_tensor_functions",
        "compute_input_size_",
        "g_per_op_engine_pref",
        "g_global_engine_pref",
        "try_create_operator",
        "create_operator",
        "op_registry_key",
        "set_per_op_engine_pref",
        "set_global_engine_pref",
        "set_engine_pref",
        "set_op_engine_pref",
        "create_operator_with_net_position",
        "g_device_type_registry",
        "get_gradient_for_op",
        "infer_blob_shapes_and_types",
        "load_int_8tensor_info_of_blob",
        "get_tensor_shape_of_blob",
        "infer_blob_shapes_and_types_from_workspace",
        "infer_blob_shapes_and_types_from_map",
        "infer_blob_shapes_and_types_from_map_with_blob_types",
        "validate_tensor_devices",
        "get_registered_operators",
        "operator_logger_default",
        "set_operator_logger",
        "get_operator_logger",
        "OperatorSchemaTest_BasicSchema",
        "OperatorSchemaTest_SpecifiedInputOutput",
        "OperatorSchemaTest_InputOutputRelation",
        "OperatorSchemaTest_SameInputOutput",
        "OperatorSchemaTest_CalculateOutput",
        "OperatorSchemaTest_Inplace",
        "OperatorSchemaTest_TensorInferenceIdentical",
        "OperatorSchemaTest_TensorInferenceArbitrary",
        "OperatorSchemaTest_TestCastSchema",
        "OpSchemaCost",
        "kCannotComputeNumOutputs",
        "SchemaArgument",
        "OpSchema",
        "TensorInferenceFunctionType",
        "CostInferenceFunctionType",
        "DeviceInferenceFunctionType",
        "declare_standard_arg",
        "OpSchemaRegistry",
        "create_tensor_shape",
        "get_dims_vector",
        "n_elem_from_dim",
        "n_elem_between_dim",
        "infer_op_input_output_device",
        "pointwise_cost_inference",
        "operator_schema",
        "operator_schema",
        "gradient_operator_schema",
        "gradient_operator_schema",
        "define_standarg_arg",
        "JustTest",
        "JustTestCUDA",
        "JustTestCUDNN",
        "EnginePrefTest_GPUDeviceDefaultPreferredEngines",
        "JustTest",
        "JustTestAndNeverConstructs",
        "JustTestAndDoesConstruct",
        "JustTestWithSomeOutput",
        "OperatorTest_DeviceTypeRegistryWorks",
        "OperatorTest_RegistryWorks",
        "OperatorTest_RegistryWrongDevice",
        "OperatorTest_ExceptionWorks",
        "OperatorTest_FallbackIfEngineDoesNotBuild",
        "OperatorTest_MultipleEngineChoices",
        "OperatorTest_CannotUseUninitializedBlob",
        "OperatorTest_TestParameterAccess",
        "OperatorTest_CannotAccessParameterWithWrongType",
        "OperatorDeathTest_DISABLED_CannotAccessRepeatedParameterWithWrongType",
        "OperatorTest_TestDefaultValue",
        "OperatorTest_TestSetUp",
        "OperatorTest_TestSetUpInputOutputCount",
        "OperatorTest_TestOutputValues",
        "get_net_def_for_test",
        "NetTest_TestScaffoldingSimpleNet",
        "NetTest_TestScaffoldingDAGNet",
        "FooGradientOp",
        "FooGradientDummyEngineOp",
        "GetFooGradient",
        "OperatorGradientRegistryTest_GradientSimple",
        "EnginePrefTest_PerOpEnginePref",
        "EnginePrefTest_GlobalEnginePref",
        "EnginePrefTest_GlobalEnginePrefAndPerOpEnginePref",
        "EnginePrefTest_GlobalEnginePrefAndPerOpEnginePrefAndOpDef",
        "EnginePrefTest_SetOpEnginePref",
        "EnginePrefTest_SetDefaultEngine",
        "JustTestWithRequiredArg",
        "RequiredArg_Basic",
        "JustTestWithStandardIsTestArg",
        "IsTestArg_standard",
        "JustTestWithNonStandardIsTestArg",
        "IsTestArg_non_standard"
      ]
    },
    {
      "caffe2-opt": [
        "BoundShapeSpec",
        "BoundShapeInferencerBase",
        "BoundShapeInferencerBaseTrait",
        "BoundShapeInferencer",
        "convert_to_vec",
        "set_dim_type_with_first",
        "size_from_dim",
        "size_to_dim",
        "take_precedence_over",
        "get_bound_shape_inferencer",
        "make_tensor_info",
        "verify_shape_info",
        "BoundShapeInference_SparseLengthsSum",
        "BoundShapeInference_SparseLengthsSumSparseLookup",
        "BoundShapeInference_SparseLengthsSumFused8BitRowwise",
        "BoundShapeInference_SparseLengthsSum8BitRowwiseSparse",
        "BoundShapeInference_SparseLengthsSumFused4BitRowwise",
        "BoundShapeInference_LengthsRangeFill",
        "BoundShapeInference_ConstantFill",
        "BoundShapeInference_Reshape",
        "BoundShapeInference_ConcatMissingInput",
        "BoundShapeInference_Int8QuantizeInferInputBackwards",
        "BoundShapeInference_ConcatInferInputBackwards",
        "BoundShapeInference_ElementwiseInferInputBackwards",
        "BoundShapeInference_ElementwiseOp",
        "BoundShapeInference_Bucketize",
        "BoundShapeInference_Split",
        "BoundShapeInference_FC",
        "BoundShapeInference_FC3D",
        "BoundShapeInference_Quantization",
        "BoundShapeInference_Tile",
        "BoundShapeInference_Combo0",
        "BoundShapeInference_Softmax",
        "OnnxifiTransformerOptions",
        "OnnxifiOptionHelper",
        "OnnxifiTransformer",
        "kRealBatchSizeBlob",
        "kInitializers",
        "kBufferSize",
        "strip_shape_info_map",
        "onnxifi_data_type",
        "convert_to_value_info",
        "get_weights_and_inputs",
        "collect_inputs_and_outputs",
        "fetch_inputs_to_if_ops_subnet",
        "fill_model_info",
        "get_blob1st_dim_size",
        "compose_result_net",
        "enforce_fp_32inputs_to_fp16",
        "merge_fp_32inputs_and_convert_to_fp16",
        "split_sparse_lengths_sum_sparse",
        "OptimizationPass",
        "OptimizationPassTrait",
        "WorkspaceOptimizationPass",
        "register_ws_opt_pass",
        "register_ws_opt_pass_from_func",
        "register_opt_pass",
        "register_opt_pass_from_func",
        "set_device_option",
        "add_blob_device_options",
        "inject_data_edge_indicators",
        "remove_data_edge_indicators",
        "workspace_optimizations",
        "graph_optimzations",
        "optimize_with_workspace",
        "optimize",
        "add_conv",
        "supports",
        "transform",
        "BackendCuttingTest_unit",
        "BackendCuttingTest_line",
        "BackendCuttingTest_convergedPaths",
        "BackendCuttingTest_skipPath",
        "Converter_ClipRangesGatherSigridHashConverter",
        "Converter_ClipRangesGatherSigridHashV2Converter",
        "fuse_cast_batch_one_hot",
        "dead_code_elim",
        "GroupAnnotation",
        "show_node",
        "predicate_fn",
        "VisitorContext",
        "get_info_mut",
        "get_info",
        "explore",
        "TransformSubgraph",
        "convert_to_c2net",
        "detect_boundary_references",
        "replace_subgraph",
        "prune_unreferered_nodes",
        "dump_graph",
        "supports_fn",
        "transform_fn",
        "optimize_for_backend",
        "kNetPos",
        "kModelId",
        "BackendTransformOptions",
        "BackendTransformerBase",
        "BackendTransformerBaseTrait",
        "wrap_shape_info_into_tensor_proto",
        "add_arg",
        "DeviceTest_InsertCopies",
        "gen_tensors",
        "Basic_MatchSingleNode",
        "Basic_SyntaxError",
        "Basic_Diamond",
        "Basic_BadDiamond",
        "Basic_StarInputs",
        "Basic_StarOutputs",
        "Caffe2ToNQL_Basic",
        "Caffe2ToNQL_TensorsNameDeduplication",
        "ConcatAddMulReplaceNaNClipOp",
        "ASTExpr",
        "ASTStmt",
        "ASTGraph",
        "alloc_string",
        "alloc_vector",
        "parse_string",
        "parse_file",
        "add_arg",
        "fuse_activation",
        "fuse_conv_bnhelper",
        "fuse_convBN",
        "ParallelizationScheme",
        "Caffe2Annotation",
        "BatchMatMulConverter",
        "MulConverter",
        "AddConverter",
        "CastConverter",
        "ReplaceNaNConverter",
        "ConcatAddMulReplaceNaNClipConverter",
        "SliceConverter",
        "ClipRangesGatherSigridHashConverter",
        "ClipRangesGatherSigridHashV2Converter",
        "ClipRangesConverter",
        "SigridHashConverter",
        "QShapeInfo",
        "ShapeInfo",
        "ShapeInfoMap",
        "is_number",
        "to_lower",
        "to_tensor_proto_data_type",
        "get_shape_info_from_blob",
        "modify_tensor_shape_dim_size",
        "change_tensor_bound_shapes",
        "extract_shape_info_from_tensor_bound_shapes",
        "construct_shape_info_with_default_dim_type",
        "parse_shape_info_map_from_string",
        "optimize_for_mkldnn",
        "get_blob",
        "get_blob",
        "get_tensor",
        "get_mutable_tensor",
        "get_op_def",
        "get_mutable_op_def",
        "is_op_type",
        "is_on_ideep_device",
        "is_conv_fusion",
        "reset_conv_for_fusion",
        "remove_arg",
        "move_op_arg",
        "remove_stop_gradient_for_inference",
        "fuse_conv_bnand_aff_ch",
        "fuse_conv_sum",
        "fuse_activation",
        "enforce_fusion_inplace",
        "fuse_order_switch_to_quantize_op",
        "fuse_pre_convert_op",
        "set_pooling_inference_mode",
        "pre_convert_filters_format",
        "Fuser",
        "optimize_for_mkldnn",
        "concat_elim",
        "concat_add_mul_nan_clip_elim",
        "gather_fuse_8bit_rowwise_quant_float_mul_lengths_sum_elim",
        "OnnxAnnotation",
        "Converter_Basic",
        "Converter_UnknownType",
        "Converter_SpecializeConverter",
        "fake_net",
        "Converter_ExternalInputs",
        "Converter_ExternalOutputs",
        "Converter_InjectDataEdgeIndicators",
        "fake_net",
        "Converter_DeclareExport",
        "Distributed_InsertDeviceOptions",
        "Distributed_InsertDeviceOptionsFailureCase",
        "Converter_InjectDataEdgeIndicators",
        "Converter_OverloadedConvertToNNModule",
        "parse_net_position_list",
        "parse_block_list_ops",
        "onnxifi",
        "addNNPACK",
        "is_nnpackconv_relu_efficient",
        "fuse_nnpackconv_relu",
        "get_input_edges",
        "get_output_edges",
        "insert_copies",
        "Criteria",
        "TestMatchGraph",
        "TestMatchPredicate",
        "MatchedSubgraph",
        "GraphMatcher",
        "dealloc_token_strings",
        "test_match_predicate",
        "get_name_for_blob",
        "get_nqlstring_for_blob",
        "compute_dedup_rename_map",
        "get_node_name",
        "convert_to_nqlstring",
        "gatherFuse8BitRowwiseQuantFloatMulLengthsSumElim_Basic",
        "gatherFuse8BitRowwiseQuantFloatMulLengthsSumElim_NoFuse",
        "ConcatElim_BasicNet",
        "ConcatElim_ProdNet",
        "ConcatAddMulNaNClipElim_BasicNet",
        "kFP16_SUFFIX",
        "kFP32_SUFFIX",
        "kTILE_SUFFIX",
        "in_batch_broadcast",
        "freeze_quantization_params",
        "create_test",
        "check",
        "get_fake_fp_16op_mapping",
        "find_mutable_operator_by_input",
        "fake_fp_16fold_layer_norm",
        "fake_fp_16fold_layer_norm_quant",
        "fake_fp_16fold_swish",
        "fake_fp_16fold_tanh_quant",
        "fake_fp_16fuse_ops",
        "fake_fp_16transform",
        "check_net",
        "check_shape_info",
        "make_tensor_info",
        "InBatchBroadcast_main",
        "DeadCodeElim_BasicElim",
        "DeadCodeElim_BasicNoElim",
        "DeadCodeElim_PartiallyUsedNoElim",
        "OutputReshapeInfo",
        "TensorInfo",
        "OnnxifiOp",
        "set_input_tensor_descriptor_type_and_buffer",
        "set_input_tensor_descriptor_type_and_buffer_with_int8tensor_cpu",
        "adjust_quantized_offset_impl",
        "adjust_quantized_offset",
        "onnxifi_type_to_data_type",
        "set_output_tensor_descriptor_type_and_buffer",
        "copy_descriptor",
        "blob_to_tensor_descriptor",
        "get_onnxifi_data_type",
        "map_onnx_status_to_string",
        "Converter",
        "register_converter",
        "trivial_converter",
        "get_strides",
        "get_pads",
        "get_dilations",
        "get_group",
        "get_layout",
        "ConvConverter",
        "ConvTransposeConverter",
        "ClipConverter",
        "AveragePoolConverter",
        "MaxPoolConverter",
        "ConcatConverter",
        "FCConverter",
        "convert_to_neural_net_operator",
        "convert_to_nnmodule",
        "convert_to_operator_def",
        "get_or_add_caffe2_annotation",
        "convert_to_caffe_2proto",
        "merge_external_tensors",
        "convert_to_caffe_2proto_with_old_net",
        "push_op_to_front",
        "inject_data_edge_indicators",
        "remove_data_edge_indicators",
        "TvmTransformOptions",
        "TvmTransformer",
        "tvm_transform",
        "clean_up_predict_net"
      ]
    },
    {
      "caffe2-output": [
        "OutputMinMaxNetObserver",
        "OutputMinMaxObserver"
      ]
    },
    {
      "caffe2-perfkernels": [
        "embedding_lookup",
        "embedding_lookup_generic_slow",
        "embedding_specialization",
        "typed_axpy",
        "typed_axpy__base",
        "typed_axpyf32f32",
        "typed_axpy_halffloat__base",
        "typed_axpyf16f32",
        "typed_axpy_uint8_float__base",
        "typed_axpyu8f32",
        "sigmoid",
        "host_tanh",
        "lstm_unit_impl",
        "lstm_unit_gradient_impl",
        "QEPSILON",
        "quantize_and_compress__base",
        "quantize_and_compress",
        "decompress_and_dequantize__base",
        "decompress_and_dequantize",
        "lstm_unit_impl_avx2_fma",
        "lstm_unit_gradient_impl_avx2_fma",
        "lstm_unit_cpu",
        "lstm_unit_gradient_cpu",
        "lstm_unit_cpuf32",
        "lstm_unit_gradient_cpuf32",
        "fused_8bit_rowwise_embedding_lookup_int32_t_float_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_float_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_float_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_float_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_float_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_float_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_half_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_half_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_half_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_half_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_half_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_half_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_uint8_t_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_uint8_t_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int32_t_uint8_t_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_uint8_t_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_uint8_t_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_int64_t_uint8_t_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup",
        "fused_8bit_rowwise_embedding_lookup_generic_slow",
        "fused_8bit_rowwise_embedding_specialization",
        "lstm_unit_cpu",
        "lstm_unit_cpuf32",
        "lstm_unit_gradient_cpu",
        "lstm_unit_gradient_cpuf32",
        "lstm_unit_implf32",
        "lstm_unit_gradient_implf32",
        "lstm_unit_impl_avx2_fma",
        "lstm_unit_gradient_impl_avx2_fma",
        "lstm_unit_impl_avx2_fmaf32",
        "lstm_unit_gradient_impl_avx2_fmaf32",
        "quantize_and_compress",
        "decompress_and_dequantize",
        "embedding_lookup_idx_int32_t_float_float_avx2_fma",
        "embedding_lookup_idx_int32_t_float_float_false_avx2_fma",
        "embedding_lookup_idx_int32_t_float_float_true_avx2_fma",
        "embedding_lookup_idx_int64_t_float_float_avx2_fma",
        "embedding_lookup_idx_int64_t_float_float_false_avx2_fma",
        "embedding_lookup_idx_int64_t_float_float_true_avx2_fma",
        "embedding_lookup_idx_int32_t_half_float_avx2_fma",
        "embedding_lookup_idx_int32_t_half_float_false_avx2_fma",
        "embedding_lookup_idx_int32_t_half_float_true_avx2_fma",
        "embedding_lookup_idx_int64_t_half_float_avx2_fma",
        "embedding_lookup_idx_int64_t_half_float_false_avx2_fma",
        "embedding_lookup_idx_int64_t_half_float_true_avx2_fma",
        "embedding_lookup_idx_int32_t_uint8_t_float_avx2_fma",
        "embedding_lookup_idx_int32_t_uint8_t_float_false_avx2_fma",
        "embedding_lookup_idx_int32_t_uint8_t_float_true_avx2_fma",
        "embedding_lookup_idx_int64_t_uint8_t_float_avx2_fma",
        "embedding_lookup_idx_int64_t_uint8_t_float_false_avx2_fma",
        "embedding_lookup_idx_int64_t_uint8_t_float_true_avx2_fma",
        "typed_axpy__avx2_fma",
        "typed_axpy_halffloat__avx2_fma",
        "typed_axpy_uint8_float__avx2_fma",
        "base_do",
        "avx512_do",
        "avx512_do",
        "avx2_do",
        "avx2_fma_do",
        "avx2_do",
        "avx2_fma_do",
        "avx_do",
        "avx_f16c_do",
        "avx_do",
        "QEPSILON",
        "quantize_and_compress__avx2",
        "decompress_and_dequantize__avx2",
        "adagrad_update_base_inlined",
        "adagrad_update_prefetch_inlined",
        "adagrad_update",
        "adagrad_update_base",
        "adagrad_update_prefetch_base",
        "adagrad_fp16_update_prefetch_base",
        "adagrad_update_no_prefetch",
        "adagrad_update_prefetch",
        "adagrad_fp16_update_prefetch",
        "float_to_fused_8bit_rowwise_quantized_base",
        "fused_8bit_rowwise_quantized_to_float_base",
        "float_to_fused_8bit_rowwise_quantized",
        "fused_8bit_rowwise_quantized_to_float",
        "float_to_fusedn_bit_rowwise_quantized_sb_half_base",
        "fusedn_bit_rowwise_quantized_sb_half_to_float_base",
        "float_to_fusedn_bit_rowwise_quantized_sb_half",
        "fusedn_bit_rowwise_quantized_sb_half_to_float",
        "embedding_lookup_int32_t_float_float_avx2_fma",
        "embedding_lookup_int32_t_float_float_false_avx2_fma",
        "embedding_lookup_int32_t_float_float_true_avx2_fma",
        "embedding_lookup_int64_t_float_float_avx2_fma",
        "embedding_lookup_int64_t_float_float_false_avx2_fma",
        "embedding_lookup_int64_t_float_float_true_avx2_fma",
        "embedding_lookup_int32_t_half_float_avx2_fma",
        "embedding_lookup_int32_t_half_float_false_avx2_fma",
        "embedding_lookup_int32_t_half_float_true_avx2_fma",
        "embedding_lookup_int64_t_half_float_avx2_fma",
        "embedding_lookup_int64_t_half_float_false_avx2_fma",
        "embedding_lookup_int64_t_half_float_true_avx2_fma",
        "embedding_lookup_int32_t_uint8_t_float_avx2_fma",
        "embedding_lookup_int32_t_uint8_t_float_false_avx2_fma",
        "embedding_lookup_int32_t_uint8_t_float_true_avx2_fma",
        "embedding_lookup_int64_t_uint8_t_float_avx2_fma",
        "embedding_lookup_int64_t_uint8_t_float_false_avx2_fma",
        "embedding_lookup_int64_t_uint8_t_float_true_avx2_fma",
        "cvtsh_ss",
        "cvtss_sh",
        "embedding_lookup_idx",
        "embedding_lookup_generic_slow_idx",
        "embedding_idx_specialization",
        "fused_8bit_rowwise_embedding_lookup_idx",
        "fused_8bit_rowwise_embedding_lookup_generic_slow_idx",
        "fused_8bit_rowwise_embedding_idx_specialization",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_float_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_float_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_float_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_float_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_float_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_float_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_half_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_half_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_half_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_half_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_half_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_half_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_uint8_t_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_uint8_t_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int32_t_uint8_t_float_true_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_uint8_t_float_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_uint8_t_float_false_avx2_fma",
        "fused_8bit_rowwise_embedding_lookup_idx_int64_t_uint8_t_float_true_avx2_fma",
        "adagrad_update__avx2_fma",
        "adagrad_update_prefetch__avx2_fma",
        "adagrad_fp16_update_prefetch__avx2_fma",
        "typed_axpy__avx_f_16c",
        "typed_axpy_halffloat__avx_f_16c"
      ]
    },
    {
      "caffe2-plan": [
        "ShouldContinue",
        "ExceptionWrapper",
        "ExceptionWrapperTerminate",
        "ScopeExitGuard",
        "NetDefInfo",
        "NetDefMap",
        "get_continuation_test",
        "get_should_stop",
        "WorkspaceIdInjector",
        "CompiledGuard",
        "ExecutionStepWrapper",
        "CompiledExecutionStep",
        "ReporterInstance",
        "Reporter",
        "check_should_stop",
        "execute_step_recursive",
        "run_plan_on_workspace",
        "PlanExecutorTest_EmptyPlan",
        "StuckBlockingOp",
        "NoopOp",
        "StuckAsyncOp",
        "TestError",
        "Exception",
        "ErrorOp",
        "BlockingErrorOp",
        "parallel_error_plan",
        "parallel_error_plan_with_cancellable_stuck_net",
        "reporter_error_plan_with_cancellable_stuck_net",
        "HandleExecutorThreadExceptionsGuard",
        "PlanExecutorTest_ErrorAsyncPlan",
        "PlanExecutorTest_BlockingErrorPlan",
        "PlanExecutorTest_ErrorPlanWithCancellableStuckNet",
        "PlanExecutorTest_ReporterErrorPlanWithCancellableStuckNet",
        "should_stop_with_cancel_plan",
        "PlanExecutorTest_ShouldStopWithCancel"
      ]
    },
    {
      "caffe2-predictor": [
        "get_blobs",
        "get_net",
        "extract_meta_net_def",
        "run_global_initialization",
        "emulator",
        "Emulator",
        "Predictor_TensorList",
        "Predictor_TensorMap",
        "Predictor",
        "enforce_is_tensor",
        "get_blob",
        "get_tensor",
        "BenchmarkParam",
        "BenchmarkRunner",
        "emulator",
        "FillerTrait",
        "Filler",
        "DataNetFiller",
        "filler_type_pair_t",
        "DataRandomFiller",
        "fill_with_type",
        "TestDataRandomFiller",
        "fill_random_network_inputs",
        "MS_IN_SECOND",
        "StdOutputFormatter",
        "has_input",
        "has_output",
        "rewrite_subnets_for_if_op",
        "rename_inputs",
        "rename_outputs",
        "rename_inputs_in_children",
        "rename_output_in_parents",
        "found_op_candidate",
        "remove_ops_by_type",
        "InferenceGraph",
        "predictSpec",
        "initSpec",
        "metaSpec",
        "random_tensor",
        "parse_net_def",
        "parse_meta_net_def",
        "PredictorTest",
        "PredictorTest_SimpleBatchSized",
        "PredictorTest_SimpleBatchSizedMapInput",
        "PredictorParameters",
        "PredictorConfig",
        "make_workspace",
        "get_net",
        "get_blobs",
        "make_predictor_config",
        "make_predictor_config_with_init_net_and_run_net",
        "RunnableNet",
        "NetSupplier",
        "SingleNetSupplier",
        "SingleLoadedNetSupplier",
        "MutatingNetSupplier",
        "DataFiller_FillNetInputTest",
        "UnsafeThreadLocalMap",
        "UnsafeAllThreadLocalHelperVector",
        "AllThreadLocalHelperVector",
        "ThreadLocalHelper",
        "ThreadLocalPtrImpl",
        "ThreadLocalPtr",
        "get_all_thread_local_helper_vector",
        "get_thread_local_helper",
        "OutputFormatter",
        "Profiler"
      ]
    },
    {
      "caffe2-prof": [
        "ProfDAGStats",
        "ProfDAGReport",
        "ProfDAGCounters"
      ]
    },
    {
      "caffe2-proto": [
      ]
    },
    {
      "caffe2-qtensor": [
        "kQTensorBlobQType",
        "QTensorSerializer",
        "QTensorDeserializer",
        "QTensor"
      ]
    },
    {
      "caffe2-quant": [
        "raw_uint_16to_fp16",
        "check_and_saturate",
        "TensorQuantizationParams",
        "choose_quantization_params",
        "kConv1dSqueezeDim",
        "make_arg_for_conv1d",
        "handle_weights_saturation"
      ]
    },
    {
      "caffe2-queue": [
        "RebatchingQueue",
        "concat",
        "split",
        "CreateBlobsQueueOp",
        "EnqueueBlobsOp",
        "DequeueBlobsOp",
        "CloseBlobsQueueOp",
        "SafeEnqueueBlobsOp",
        "SafeDequeueBlobsOp",
        "WeightedSampleDequeueBlobsOp",
        "RebatchingQueuePtr",
        "CreateRebatchingQueueOp",
        "EnqueueRebatchingQueueOp",
        "DequeueRebatchingQueueOp",
        "CloseRebatchingQueueOp",
        "get_string_from_blob",
        "BlobsQueueDBCursor",
        "BlobsQueueDB",
        "CreateBlobsQueueDBOp",
        "BlobsQueue",
        "QueueStats",
        "SDT_NONBLOCKING_OP",
        "SDT_BLOCKING_OP",
        "SDT_TIMEOUT",
        "SDT_ABORT",
        "SDT_CANCEL"
      ]
    },
    {
      "caffe2-random": [
      ]
    },
    {
      "caffe2-register": [
        "RegisterQuantizationParamsNetObserver",
        "RegisterQuantizationParamsWithHistogramNetObserver"
      ]
    },
    {
      "caffe2-registry": [
      ]
    },
    {
      "caffe2-serde": [
        "Int8TensorCPUSerializer",
        "Int8TensorCPUDeserializer",
        "ReadAdapterInterface",
        "kFutureDtypeBlob",
        "kInt32DtypeBlob",
        "log_blob",
        "TensorSerialization_TestUnknownDType",
        "IStreamAdapter",
        "mz_crc32",
        "TensorDeserializer",
        "serialize_type_case",
        "deserialize_tensor_data",
        "deserialize_format_case",
        "deserialize_type_case",
        "kTensorBlobType",
        "kChunkIdSeparator",
        "kDefaultChunkSize",
        "kNoChunking",
        "SerializationAcceptor",
        "BlobSerializerBase",
        "BlobDeserializerBase",
        "serialize_blob_from_registration_mechanism",
        "serialize_blob_convenience",
        "serialize_blob",
        "deserialize_blob_convenience",
        "deserialize_blob",
        "dims_from_tensor_proto",
        "numel_from_tensor_proto",
        "get_data_type",
        "tensor_options_from_proto",
        "context_from_proto",
        "empty_tensor_from_proto",
        "enable_byte_encoding",
        "enable_byte_encoding_float16",
        "serialize_using_bytes_or_int32",
        "deserialize_tensor",
        "get_mutable_tensor_data_range",
        "get_tensor_data_range",
        "serialize_as_string_enforce_check",
        "copy_to_proto_with_cast",
        "copy_from_proto_as_is",
        "copy_from_proto_with_cast",
        "serialize_blob_proto_as_string_enforce_check",
        "extend_repeated_field",
        "copy_to_proto_as_is",
        "deserialize_tensor_body",
        "serialize_tensor_data_f32",
        "serialize_tensor_data_f64",
        "serialize_tensor_data_string",
        "serialize_tensor_data_f16",
        "serialize_tensor_data_i64",
        "serialize_tensor_data_i32",
        "SerializeParams",
        "DeserializeParams",
        "StringSerializer",
        "StringDeserializer",
        "get_gpuid_for_pointer",
        "deserialize_legacy_byte_data",
        "deserialize_impl",
        "IntegralOrBoolean",
        "i_or_b",
        "serialize_tensor_data",
        "TensorSerializer",
        "FileAdapter",
        "PyTorchStreamWriterAndReader_SaveAndLoad",
        "Polynomial",
        "swap",
        "MaxSlice",
        "MaxSlice",
        "MaxSlice",
        "MaxSlice",
        "MaxSlice",
        "crc32_bitwise",
        "crc32_halfbyte",
        "crc32_1byte",
        "crc32_1byte_tableless",
        "crc32_1byte_tableless2",
        "crc32_4bytes",
        "crc32_8bytes",
        "crc32_4x8bytes",
        "crc32_16bytes",
        "crc32_16bytes_prefetch",
        "crc32_fast",
        "crc32_combine",
        "Crc32Lookup0",
        "Crc32Lookup1",
        "Crc32Lookup2",
        "Crc32Lookup3",
        "Crc32Lookup4",
        "Crc32Lookup5",
        "Crc32Lookup6",
        "Crc32Lookup7",
        "Crc32Lookup8",
        "Crc32Lookup9",
        "Crc32Lookup10",
        "Crc32Lookup11",
        "Crc32Lookup12",
        "Crc32Lookup13",
        "Crc32Lookup14",
        "Crc32Lookup15",
        "Crc32Lookup",
        "kMinSupportedFileFormatVersion",
        "kMaxSupportedFileFormatVersion",
        "kProducedFileFormatVersion",
        "kProducedBytecodeVersion",
        "PyTorchStreamReader",
        "PyTorchStreamWriter",
        "kFieldAlignment",
        "istream_read_func",
        "basename",
        "MZ_ZIP_LOCAL_DIR_HEADER_SIZE",
        "MZ_ZIP_LDH_FILENAME_LEN_OFS",
        "MZ_ZIP_LDH_EXTRA_LEN_OFS",
        "get_padding",
        "read_le_16",
        "ostream_write_func"
      ]
    },
    {
      "caffe2-serverquantize": [
        "BaseType",
        "FullyConnectedDNNLowPAcc16Op",
        "ReluDNNLowPOp",
        "reluavx2",
        "l2_minimization_kernelavx2",
        "Int8GenQuantParamsMinMaxOp",
        "ConvPoolDNNLowPOpBase",
        "use_conv_pool_dnnlowp_operator_base_functions",
        "sz",
        "array",
        "sz_test",
        "testarray",
        "isclose",
        "isrelclose",
        "mse",
        "test_case",
        "test_vector_case",
        "FP16Quant_fp32_to_fp16",
        "max_pool_avx2",
        "average_pool_avx2",
        "average_pool_3d_avx2",
        "DynamicHistogram_HistSimilar",
        "Sigmoid",
        "BatchMatMulDNNLowPOp",
        "Sigmoid_SigmoidUnitTest",
        "reluavx2",
        "reluavx2_u8",
        "reluavx2_u16",
        "server_quanize_kl_minimization_example",
        "GroupNormFP32Op",
        "GroupNormDNNLowPOp",
        "server_quantize_l1_minimization_example",
        "QuantizeDNNLowPOp",
        "BatchPermutationFP32Op",
        "BatchPermutationDNNLowPOp",
        "QuantizationErrorMinimization",
        "NormMinimizationKind",
        "NormMinimization",
        "L1ErrorMinimization",
        "P99",
        "spatial_bn_nhwc_avx2",
        "spatial_bn_nhwc_avx2_uint8",
        "spatial_bn_nhwc_avx2_u8",
        "TanhFunctor",
        "im_2colNCHW",
        "im_2col_nd_nchw",
        "im_2colNHWC",
        "im_2col3DNHWC",
        "Tanh",
        "DEFAULT_MAX_ABS_ERR",
        "DEFAULT_NUM_IN_BITS",
        "DEFAULT_NUM_OUT_BITS",
        "get_saturation_region_begin",
        "get_pass_region_end",
        "sgn",
        "quanitze_p99_example",
        "server_quantize_l2_minimization_approx_example",
        "Tanh_TanhUnitTest",
        "ConvFp32Op",
        "ConvDNNLowPOp",
        "conv_nhwc_ref",
        "dispatchfbgemm",
        "conv_nhwc_core",
        "FCFp32Op",
        "ConvFp32Op",
        "FullyConnectedDNNLowPPackWeightOp",
        "ConvDNNLowPPackWeightOp",
        "kONNXIFI_DATATYPE_UINT8",
        "kONNXIFI_DATATYPE_INT32",
        "kONNXIFI_DATATYPE_INT8",
        "Int8ConvDNNLowpPackedWeightBlobShapeFunctions",
        "Int8FCDNNLowpPackedWeightBlobShapeFunctions",
        "quantize_weight",
        "compute_column_offsets",
        "count_outliers",
        "extract_outlier_matrix",
        "quantize_conv_bias",
        "MulFp32Op",
        "MulDNNLowPOp",
        "server_quantize_l2_minimization_example",
        "FCDefaultTransposeWeight",
        "FullyConnectedDNNLowPOp",
        "Int8FCDNNLowPPackedWeightBlob",
        "Int8ConvDNNLowPPackedWeightBlob",
        "Histogram",
        "DynamicHistogram",
        "OVER_BINNING_FACTOR",
        "remap_histograms",
        "DequantizeDNNLowPOp",
        "find_min_max",
        "get_float_tensor_data",
        "find_min_maxf32",
        "has_dnn_lowp_engine_from_op_def",
        "has_dnn_lowp_engine_from_op_base",
        "ConcatDNNLowPOp",
        "get_work_per_thread",
        "get1d_partition",
        "get1d_partition_of2d",
        "default_input",
        "ChooseQuantizationTest",
        "ChooseQuantizationTest_L2MinimizationTest",
        "VLEN",
        "element_wise_sumavx2",
        "QuantizationErrorStats",
        "has_dnn_lowp_engine_",
        "has_dnnlow_pengine_",
        "propagate_output_tensor_quantization_params",
        "get_input_tensor_quantization_params_of",
        "output_argument_idx_string_",
        "output_scale_argument_name",
        "output_zero_point_argument_name",
        "set_static_quantization_params_",
        "set_static_quantization_params",
        "has_static_quantization",
        "get_static_quantization_params_of",
        "quantize_input_if_needed",
        "row_wise_quantize_input_if_needed",
        "measure_quantization_error",
        "report_quantization_error",
        "get_quantization_factory_of_",
        "get_quantization_factory_of",
        "adjust_output_tensor_quantization_params_with_followed_by",
        "parse_dnn_lowp_operator_arguments",
        "add_scale_zero_offset_arguments_with_histogram",
        "ResizeNearestFP32Op",
        "ResizeNearestDNNLowPOp",
        "Requantization_BatchRequantizationUnitTest",
        "Requantization_RequantizationUnitTest",
        "ElementwiseLinearFp32Op",
        "ElementwiseLinearDNNLowPOp",
        "AveragePool",
        "MaxPool",
        "AveragePoolFp32Op",
        "AveragePoolDnnLowPOp",
        "MaxPoolFp32Op",
        "MaxPoolDnnLowPOp",
        "LSTMUnitDNNLowPOp",
        "lstm_unit",
        "FbGemmPackOp",
        "ld_st_masks",
        "fp32_to_bfp16",
        "fp32_to_bfp24",
        "fp32_to_bfp14",
        "fp32_to_bfp16_scalar",
        "fp32_to_fp16",
        "fp32_to_bfp16_round",
        "transpose_4rows",
        "Int8QuantSchemeBlob",
        "Int8QuantParamsBlob",
        "Int8GenQuantParamsOp",
        "ConvReluOp",
        "SMALL_SCALE_THRESHOLD",
        "get_norm",
        "L2ErrorMinimization",
        "l2minimization_kernelavx2",
        "SigmoidFunctor",
        "ChannelShuffleFp32Op",
        "ChannelShuffleDNNLowPOp",
        "AddFp32Op",
        "AddDNNLowPOp",
        "UnaryElementwiseWithArgsDNNLowPOp",
        "BinaryElementwiseDNNLowPOp",
        "declare_eigen_functor",
        "SumDNNLowPOp",
        "GatherDNNLowPOp",
        "element_wise_sumavx2",
        "Int8QuantSchemeBlobFillOp",
        "fp32_to_bfp16",
        "fp32_to_bfp24",
        "fp32_to_bfp14",
        "fp32_to_bfp16_scalar",
        "fp32_to_fp16",
        "fp32_to_bfp16_round",
        "FullyConnectedFakeLowpFPOp",
        "FullyConnectedGradientFakeLowpFPOp",
        "nlines_log",
        "SpatialBNReluOp",
        "ConvDNNLowPAcc16Op",
        "conv_nhwc_acc16_ref",
        "SpatialBNDNNLowPOp",
        "spatial_bn_nhwc_avx2",
        "server_quantize_elementwise_sum_benchmark",
        "QuantizationKind",
        "QuantizationFactory",
        "string_to_kind",
        "adjust_hist_to_include_zero",
        "ComputeEqualizationScaleOp",
        "FbFCPackedOperator",
        "PackedGemmMatrixFP16ShapeFunctions",
        "get_fbgemm_tensor_info",
        "caffe2_initialize_fbgemm",
        "segment_moments_avx2",
        "segment_moments_avx2_u8",
        "vector_moments_avx2",
        "vector_moments_avx2_u8",
        "compute_quantized_fused_paramsAVX2",
        "init_requantize_avx2",
        "requantize_avx2",
        "affine_batch_channel_and_requantizenchwavx2",
        "affine_batch_channel_and_requantizenchwavx2_u8",
        "affine_batch_channel_and_requantize_nhwc_avx2",
        "affine_batch_channel_and_requantizenhwcavx2_u8",
        "KLDivergenceMinimization",
        "store_matrix_in_matrix_market_format",
        "get_or_create_fbgemm_packb_matrix",
        "SumReluOp",
        "OpWrapper",
        "ResizeNearest3DFP32Op",
        "ResizeNearest3DDNNLowPOp"
      ]
    },
    {
      "caffe2-sgd": [
        "YellowFinOp",
        "dot",
        "dot_float_x3",
        "SparseAdagradFusedWithSparseLengthsSumGradientOp",
        "SparseAdagradFusedWithSparseLengthsWeightedSumGradientOp",
        "SparseAdagradFusedWithSparseLengthsWeightedSumGradientApproxOp",
        "adagrad_update_prefetch_inlined",
        "adagrad_update",
        "adagrad_update_output_effective_lr",
        "adagrad_update_output_effective_lr_and_update",
        "AdagradOp",
        "SparseAdagradOp",
        "RowWiseSparseAdagradOp",
        "cost_inference_for_adagrad",
        "cost_inference_for_sparse_adagrad",
        "cost_inference_for_row_wise_sparse_adagrad",
        "AdadeltaOp",
        "adadelta_update",
        "SparseAdadeltaOp",
        "adam_update",
        "adam_compute",
        "adam_compute_output_grad",
        "radam_update",
        "radam_compute",
        "radam_compute_output_grad",
        "AdamOp",
        "SparseAdamOp",
        "RowWiseSparseAdamOp",
        "RowWiseCounterOp",
        "weight_scale_update",
        "WeightScaleOp",
        "fp32_momentum_sgd_update",
        "FP32MomentumSGDUpdateOp",
        "MomentumSGDOp",
        "MomentumSGDUpdateOp",
        "SparseMomentumSGDUpdateOp",
        "momentum_sgd_update",
        "fp16_momentum_sgd_update",
        "FP16MomentumSGDUpdateOp",
        "ClipTensorByScalingOp",
        "compute_square_average_inlined",
        "compute_square_average_with_weight_decay_inlined",
        "compute_square_average_with_weight_decay_inlined_f16_weights",
        "RowWiseSparseAdagradFusedWithSparseLengthsSumGradientOp",
        "RowWiseSparseAdagradFusedWithSparseLengthsWeightedSumGradientOp",
        "RowWiseSparseAdagradFusedWithSparseLengthsWeightedSumGradientApproxOp",
        "RowWiseAdagradUpdateInlined",
        "FtrlParams",
        "FtrlOp",
        "SparseFtrlOp",
        "sgn",
        "ftrl_compute",
        "ftrl_update",
        "LearningRateOpFloatCPU",
        "LearningRateOp",
        "RmsPropUpdate",
        "RmsPropOp",
        "GFtrlParams",
        "GFtrlOp",
        "gftrl_compute",
        "gftrl_update",
        "LarsOp",
        "lr_update",
        "LearningRateAdaptionOp",
        "StormOp",
        "SparseStormOp",
        "storm_update",
        "wngrad_update",
        "wngrad_update_output_effective_lr",
        "wngrad_update_output_effective_lr_and_update",
        "WngradOp",
        "SparseWngradOp",
        "increment_iter",
        "IterOp",
        "AtomicIterOpStats",
        "AtomicIterOp",
        "MutexSerializer",
        "MutexDeserializer",
        "LearningRateFunctor",
        "FixedLearningRate",
        "AlternateLearningRate",
        "StepLearningRate",
        "ExpLearningRate",
        "GateLearningRate",
        "InvLearningRate",
        "PolyLearningRate",
        "LinearWarmupLearningRate",
        "ConstantWarmupLearningRate",
        "PieceWarmupLearningRate",
        "HillLearningRate",
        "SlopeLearningRate",
        "CompositeLearningRateItem",
        "CompositeLearningRate",
        "CyclicalLearningRate",
        "CosineLearningRate",
        "ConstantThenLinearWarmupLearningRate",
        "CompositeCosineLearningRate",
        "CompositeCyclicalLearningRate"
      ]
    },
    {
      "caffe2-stats": [
        "StatValue",
        "ExportedStatValue",
        "ExportedStatList",
        "ExportedStatMap",
        "to_map",
        "StatRegistry",
        "Stat",
        "ExportedStat",
        "AvgExportedStat",
        "StdDevExportedStat",
        "DetailedExportedStat",
        "StaticStat",
        "_ScopeGuard",
        "caffe_stat_ctor",
        "caffe_exported_stat",
        "caffe_avg_exported_stat",
        "caffe_stddev_exported_stat",
        "caffe_detailed_exported_stat",
        "caffe_stat",
        "caffe_static_stat",
        "caffe_event",
        "caffe_duration",
        "MyCaffeClass",
        "MyStats",
        "filter_map",
        "expect_subset",
        "StatsTest_StatsTestClass",
        "StatsTest_StatsTestDuration",
        "StatsTest_StatsTestSimple",
        "StatsTest_StatsTestStatic"
      ]
    },
    {
      "caffe2-store": [
        "store_interleaved_arm",
        "store_interleaved",
        "store_interleaved1",
        "store_interleaved_arm1",
        "store_interleaved2",
        "store_interleaved_arm2",
        "store_interleaved3",
        "store_interleaved_arm3",
        "store_interleaved4"
      ]
    },
    {
      "caffe2-system": [
      ]
    },
    {
      "caffe2-tensor": [
        "Unsafe",
        "Tensor",
        "TensorImplPtr",
        "reinitialize_and_copy_from",
        "TensorCPU",
        "k_limit_default",
        "TypeCall",
        "TensorInfoCall",
        "tensor_cpu_from_values",
        "TensorPrinter",
        "get_gpuid_for_pointer",
        "TensorStatGetter",
        "get_tensor_info_function",
        "register_tensor_info_function",
        "tensor_vector_resize",
        "empty",
        "get_tensor_info",
        "get_int_8tensor_info",
        "get_type_call_function",
        "register_type_call_function",
        "get_tensor_type",
        "get_int_8tensor_type",
        "Int8TensorCPU"
      ]
    },
    {
      "caffe2-test": [
        "assert_tensor_equals_data",
        "assert_tensor",
        "random_fill",
        "fill_tensor",
        "create_tensor_in_workspace_and_fill",
        "create_tensor_and_fill",
        "constant_fill_tensor",
        "create_tensor_and_constant_fill",
        "NetMutator",
        "WorkspaceMutator",
        "assert_tensor_equals_with_type",
        "assert_tensor_equals_with_type_f32",
        "assert_near",
        "assert_tensor_equals",
        "assert_tensor_list_equals",
        "get_tensor",
        "create_tensor",
        "create_operator"
      ]
    },
    {
      "caffe2-timer": [
        "timer",
        "Timer",
        "TimerTest_Test"
      ]
    },
    {
      "caffe2-trace": [
        "caffe_sdt_arg_constraint",
        "caffe_sdt_nop",
        "caffe_sdt_note_name",
        "caffe_sdt_note_type",
        "caffe_sdt_asm_addr",
        "caffe_sdt_asm_addr",
        "caffe_sdt_s",
        "caffe_sdt_asm_1",
        "caffe_sdt_asm_2",
        "caffe_sdt_asm_3",
        "caffe_sdt_asm_string",
        "caffe_sdt_isarray",
        "caffe_sdt_argsize",
        "caffe_sdt_arg",
        "caffe_sdt_operands_0",
        "caffe_sdt_operands_1",
        "caffe_sdt_operands_2",
        "caffe_sdt_operands_3",
        "caffe_sdt_operands_4",
        "caffe_sdt_operands_5",
        "caffe_sdt_operands_6",
        "caffe_sdt_operands_7",
        "caffe_sdt_operands_8",
        "caffe_sdt_argfmt",
        "caffe_sdt_arg_template_0",
        "caffe_sdt_arg_template_1",
        "caffe_sdt_arg_template_2",
        "caffe_sdt_arg_template_3",
        "caffe_sdt_arg_template_4",
        "caffe_sdt_arg_template_5",
        "caffe_sdt_arg_template_6",
        "caffe_sdt_arg_template_7",
        "caffe_sdt_arg_template_8",
        "caffe_sdt_note_content",
        "caffe_sdt_probe",
        "caffe_sdt_narg_",
        "caffe_sdt_narg",
        "caffe_sdt_probe_n",
        "caffe_sdt"
      ]
    },
    {
      "caffe2-traits": [
        "type_eq"
      ]
    },
    {
      "caffe2-transform": [
        "counter",
        "TransformDummyOp",
        "DummyTransform",
        "TransformTest_TestPatternMatch",
        "TransformTest_TestReplacePattern",
        "TransformTest_TestTransformApply",
        "SortedDummyTransform",
        "TransformTest_TestPatternMatchTypeSortedOrder",
        "GeneralDummyTransform",
        "TransformTest_TestPatternMatchTypeGeneral",
        "TransformSleepFastOp",
        "TransformSleepSlowOp",
        "TypeSwapTransform",
        "FastToSlowTransform",
        "SlowToFastTransform",
        "TransformTest_TestApplyTransformIfFasterIsFaster",
        "TransformTest_TestApplyTransformIfFasterButSlower",
        "TransformPatternMatchType",
        "REGISTER_TRANSFORM",
        "Transform",
        "create_transform",
        "apply_transform",
        "average_net_run_duration",
        "apply_transform_if_faster"
      ]
    },
    {
      "caffe2-txform": [
        "CommonSubexpressionEliminationTest_TestSimple",
        "CommonSubexpressionEliminationTest_TestFromExternal",
        "ConvToNNPackTest_TestSimple",
        "CommonSubexpressionEliminationTransform",
        "are_nodes_common",
        "ConvToNNPackTransform",
        "SingleOpTransform",
        "DummyCounterOp",
        "PatternNetTransformTest_TestGenerateTransform",
        "PatternNetTransformTest_TestRepeatedTransform",
        "PatternNetTransformTest_TestHardTransform",
        "PatternNetTransformTest_TestGeneralStringMatching",
        "PatternNetTransformTest_TestDeviceOptionMatching",
        "PatternNetTransformTest_TestEngineMatching",
        "PatternNetTransformTest_TestSingularArgumentMatching",
        "PatternNetTransformTest_TestNonStrictTopographicTransform",
        "PatternNetTransformTest_TestMultiInputOutputTransform",
        "PatternNetTransform",
        "compare_ops"
      ]
    },
    {
      "caffe2-types": [
        "StorageOrder",
        "string_to_storage_order",
        "get_dim_from_order_string",
        "name_scope_separator",
        "Fp16Type",
        "type_meta_to_data_type",
        "data_type_to_type_meta"
      ]
    },
    {
      "caffe2-util": [
        "reduce_min",
        "reduce_max",
        "reduce_min_with_alpha",
        "reduce_max_with_alpha",
        "reduce_sum",
        "reduce_mean",
        "reduceL1",
        "reduceL2",
        "moments",
        "delegate_rowwise_reduce_function",
        "delegate_rowwise_reduce_function",
        "delegate_colwise_reduce_function",
        "colwise_reduce_mean",
        "colwise_reduceL1",
        "colwise_reduceL2",
        "both_ends_reduce_min",
        "both_ends_reduce_max",
        "both_ends_reduce_sum",
        "both_ends_reduce_mean",
        "both_ends_reduceL1",
        "both_ends_reduceL2",
        "reduce_tensor_impl",
        "reduce_min_impl",
        "reduce_max_impl",
        "reduce_sum_impl",
        "reduce_mean_impl",
        "reduce_l1impl",
        "reduce_l2impl",
        "rowwise_moments",
        "colwise_moments",
        "both_ends_moments",
        "moments_impl",
        "delegate_global_reduce_function",
        "delegate_reduce_function",
        "caffe2_specialized_moments",
        "kCacheLineSize",
        "ThreadPool",
        "default_num_threads",
        "get_default_num_threads",
        "kDefaultMinWorkSize",
        "SignalHandlerAction",
        "SignalHandler",
        "SYS_gettid",
        "SYS_tgkill",
        "handle_signal",
        "hookup_handler",
        "unhook_handler",
        "SignalHandlerInfo",
        "kSignalHandlers",
        "get_previous_sigaction",
        "get_signal_name",
        "unwinder",
        "get_backtrace",
        "print_blob_sizes",
        "print_stacktrace",
        "call_previous_signal_handler",
        "stacktrace_signal_handler",
        "fatal_signal_handler",
        "stacktrace_signal_handler",
        "install_fatal_signal_handlers",
        "uninstall_fatal_signal_handlers",
        "set_print_stack_traces_on_fatal_signal",
        "print_stack_traces_on_fatal_signal",
        "caffe2_init_fatal_signal_handler",
        "is_pointer_aligned",
        "vert_sum_f32",
        "horizontal_sum_f32",
        "vld1q_f32_aligned",
        "vst1q_f32_aligned",
        "vst4_u8_aligned",
        "compare_div_mod",
        "FixedDivisorTest_FixedDivisorInt32Test",
        "WithCastToNewThreadPool",
        "legacy_pthreadpool_t",
        "legacy_pthreadpool_function_1d_t",
        "legacy_pthreadpool_function_1d_tiled_t",
        "legacy_pthreadpool_function_2d_t",
        "legacy_pthreadpool_function_2d_tiled_t",
        "legacy_pthreadpool_function_3d_tiled_t",
        "legacy_pthreadpool_function_4d_tiled_t",
        "legacy_pthreadpool_create",
        "legacy_pthreadpool_get_threads_count",
        "legacy_pthreadpool_compute_1d",
        "legacy_pthreadpool_parallelize_1d",
        "legacy_pthreadpool_destroy",
        "divide_round_up",
        "min",
        "compute_1d_tiled_context",
        "compute_1d_tiled",
        "legacy_pthreadpool_compute_1d_tiled",
        "compute_2d_context",
        "compute_2d",
        "legacy_pthreadpool_compute_2d",
        "compute_2d_tiled_context",
        "compute_2d_tiled",
        "legacy_pthreadpool_compute_2d_tiled",
        "compute_3d_tiled_context",
        "compute_3d_tiled",
        "legacy_pthreadpool_compute_3d_tiled",
        "compute_4d_tiled_context",
        "compute_4d_tiled",
        "my_to_string",
        "expect_stderr_contains",
        "print_tensor_and_check",
        "NoDefaultEngineOp",
        "const_assert",
        "gt",
        "is_prime",
        "FillerDistribution",
        "TensorFiller",
        "dummy_thread",
        "fork_and_pipe",
        "test_fatal_signal",
        "test_fatal_signal",
        "test_fatal_signal_no_print",
        "fatalSignalTest_SIGABRT8",
        "fatalSignalTest_SIGINT8",
        "fatalSignalTest_SIGILL8",
        "fatalSignalTest_SIGFPE8",
        "fatalSignalTest_SIGBUS8",
        "fatalSignalTest_SIGSEGV8",
        "impl_align_n",
        "sum_multiple",
        "sum_multiple1",
        "sum_multiple2",
        "sum_multiple3",
        "sum_into",
        "FixedDivisorI32",
        "kGEMMLOWPCacheLineSize",
        "AllocAligned",
        "AlignedDeleter",
        "kMaxBusyWaitNOPs",
        "GEMMLOWP_NOP",
        "GEMMLOWP_NOP4",
        "GEMMLOWP_NOP16",
        "GEMMLOWP_NOP64",
        "do_256nops",
        "wait_for_variable_change",
        "BlockingCounter",
        "Task",
        "WorkerState",
        "Worker",
        "WorkersPool",
        "MathTest_GemmNoTransNoTrans",
        "MathTest_GemmNoTransTrans",
        "kEps",
        "GemmBatchedTest",
        "GemmBatchedTest_GemmBatchedFloatTest",
        "GemmBatchedTest_GemmStridedBatchedFloatTest",
        "MathTest_GemvNoTrans",
        "MathTest_GemvTrans",
        "MathTest_FloatToHalfConversion",
        "BroadcastTest",
        "BroadcastTest_BroadcastFloatTest",
        "RandFixedSumTest",
        "test_works",
        "legacy_pthreadpool_compute_1d",
        "legacy_pthreadpool_parallelize_1d",
        "legacy_pthreadpool_get_threads_count",
        "legacy_pthreadpool_create",
        "legacy_pthreadpool_destroy",
        "exp",
        "log",
        "log1p",
        "sin",
        "asin",
        "cos",
        "acos",
        "tan",
        "atan",
        "sinh",
        "cosh",
        "sin_cos",
        "tanh",
        "abs",
        "sqr",
        "sqrt",
        "rsqrt",
        "cube",
        "cbrt",
        "neg",
        "sign",
        "not",
        "powx",
        "inv",
        "erf",
        "cdf_norm",
        "set",
        "scale",
        "scale_with_alpha_from_pointer",
        "add",
        "sub",
        "mul",
        "div",
        "min",
        "max",
        "and",
        "or",
        "xor",
        "bitwise_and",
        "bitwise_or",
        "bitwise_xor",
        "eQ",
        "nE",
        "lT",
        "lE",
        "gT",
        "gE",
        "axpy",
        "axpy_with_alpha_as_ptr",
        "axpby",
        "delegate_simple_unary_function",
        "delegate_sincos",
        "delegate_powx",
        "delegate_simple_binary_function",
        "delegate_axpby",
        "delegate_simple_unary_function",
        "caffe2_specialized_sinh",
        "caffe2_specialized_cosh",
        "caffe2_specialized_sincos",
        "caffe2_specialized_powx",
        "caffe2_specialized_cbrt",
        "caffe2_specialized_erf",
        "caffe2_specialized_cdf_norm",
        "delegate_simple_binary_function_by_eigen_operator",
        "caffe2_specialized_axpby",
        "caffe2_specialized_scale",
        "caffe2_specialized_axpy",
        "delegate_scale",
        "delegate_scale",
        "delegate_axpy",
        "caffe2_specialized_set",
        "delegate_simple_unary_function",
        "caffe2_specialized_neg",
        "caffe2_specialized_scale",
        "delegate_simple_binary_function_by_eigen_operator",
        "delegate_simple_binary_function_by_eigen_function",
        "delegate_simple_binary_function_by_std_function",
        "delegate_simple_compare_function_by_eigen_operator",
        "SmartTensorPrinter",
        "ProxyPrinter",
        "gemm_f32cpu_context",
        "gemm_ex_f32cpu_context",
        "gemv_f32cpu_context",
        "caffe2_specialized_dot",
        "gemm_f32cpu_context",
        "gemm_ex_f32cpu_context",
        "gemv_f32cpu_context",
        "caffe2_specialized_dot",
        "gemm_batched_f32cpu_context",
        "gemm_strided_batched_f32cpu_context",
        "broadcast_impl",
        "caffe2_specialized_broadcast",
        "caffe2_specialized_inv_std",
        "caffe2_specialized_rowwisemax",
        "caffe2_specialized_colwisemax",
        "caffe2_specialized_maximum",
        "delegate_eigen_2d_broadcast_1st_binary_function",
        "delegate_eigen_2d_broadcast_2nd_binary_function",
        "delegate_eigen_2d_broadcast_binary_function",
        "define_eigen_2d_broadcast_binary_function",
        "define_eigen_2d_broadcast_sub_function",
        "define_eigen_2d_broadcast_div_function",
        "not_bool_cpu_context",
        "caffe2_specialized_cpu_add_striped_batch",
        "rowwise_binary_op",
        "colwise_binary_op",
        "broadcast_binary_op_impl",
        "delegate_2d_broadcast_binary_function",
        "define_2d_compare_function",
        "define_2d_broadcast_bitwise_binary_function",
        "define_2d_broadcast_1st_div_function",
        "delegate_broadcast_binary_function",
        "define_broadcast_compare_function",
        "define_broadcast_binary_function",
        "define_broadcast_bitwise_binary_function",
        "increment_if_not_max",
        "caffe2_rand_uniform_real",
        "caffe2_rand_uniform_char",
        "caffe2_rand_uniform_int",
        "caffe2_rand_fixed_sum",
        "generate_stack_distance",
        "generate_trace_lru",
        "caffe2_rand_synthetic_data",
        "caffe2_specialized_rand_uniform_unique",
        "rand_gaussian_f32cpu_context",
        "caffe2_specialized_sum",
        "sum_sqr_f32cpu_context",
        "sum_sqr_f64cpu_context",
        "select_f32cpu_context",
        "copy_matrix_cpu_context",
        "delegate_copy_matrix_function",
        "caffe2_specialized_copy_matrix",
        "im_2col_zero_padding_and_no_dilationNCHW",
        "col_2im_zero_padding_and_no_dilationNCHW",
        "im_2col_zero_padding_and_no_dilationNHWC",
        "col_2im_zero_padding_and_no_dilationNHWC",
        "im_2col_nd_nchwimpl",
        "im_2col3d_nchwimpl",
        "im_2col_nd_f32cpu_contextNCHW",
        "col_2im_nd_f32cpu_contextNCHW",
        "im_2col_f32cpu_contextNCHW",
        "im_2col_f32cpu_contextNHWC",
        "im_2col3d_nhwcimpl",
        "im_2col_nd_f32cpu_contextNHWC",
        "col_2im_f32cpu_contextNCHW",
        "col_2im_f32cpu_contextNHWC",
        "col_2im3d_nhwcimpl",
        "col_2im_nd_f32cpu_contextNHWC",
        "bias_chwf32cpu_context",
        "caffe2_specialized_copyvector",
        "get_cast_data_type",
        "PThreadPool",
        "pthreadpool",
        "get_default_num_threads",
        "pthreadpool",
        "pthreadpool",
        "CPUGeneratorImpl",
        "DataPtr",
        "DeviceType",
        "MemoryFormat",
        "AVCodecContext",
        "AVFrame",
        "AVIOContext",
        "AVMediaType",
        "AVPacket",
        "AVPixelFormat",
        "AveragePoolFp320p",
        "Blob",
        "Bookkeeper",
        "CPUOp",
        "CUDAStream",
        "CompressedSparseColumn",
        "Context",
        "CuBlasStatus",
        "CuRandGenerator",
        "CuRandStatus",
        "CublasHandle",
        "CudaDeviceProp",
        "CudaEvent",
        "CudaGuard",
        "CudaStream",
        "CudnnDataType",
        "CudnnHandle",
        "CudnnStatus",
        "CudnnTensorDescriptor",
        "CudnnTensorFormat",
        "DNNLowPOp",
        "Database",
        "DatabaseMode",
        "Device",
        "Dim3",
        "EnforceNotMet",
        "FixedDivisor",
        "FunctionSchema",
        "Fuser",
        "IAlgo",
        "IAttr",
        "IDEEPConvolutionForwardParams",
        "IDEEPScale",
        "IDEEPTensor",
        "IDEEPTensorDescriptor",
        "IDEEPTensorDims",
        "IDType",
        "IFormat",
        "ILowpKind",
        "IProp",
        "IScale",
        "ITensor",
        "ITensorDescriptor",
        "ITensorDims",
        "IValue",
        "IntrusivePtr",
        "LabelType",
        "List",
        "MaxPoolFp320p",
        "MemoryDeleter",
        "MemoryType",
        "MessageLite",
        "NNGraph_EdgeRef",
        "NNGraph_NodeRef",
        "NNGraph_SubgraphType",
        "OnnxBackend",
        "OnnxBackendGraphMap",
        "OnnxBackendID",
        "OnnxExporter",
        "OnnxGraph",
        "OnnxModelProto",
        "OnnxSharedPtrBackendGraphInfo",
        "OnnxStatus",
        "OnnxTensorDescriptorV1",
        "OnnxTypeProto",
        "OnnxValueInfoProto",
        "OnnxifiLibrary",
        "OperatorHandle",
        "OperatorName",
        "PackBMatrix",
        "PackWeightMatrixForGConv",
        "PackWeightMatrixForGConvB",
        "PackedDepthWiseConvMatrix",
        "PatternMatchType",
        "PerGpuCudnnStates",
        "Range",
        "Registry",
        "RepeatedPtr",
        "RepeatedPtrField",
        "RequantizationParams",
        "ScalingParamType",
        "SerializationFormat",
        "SigAction",
        "SkipOutputCopy",
        "SmallVec",
        "Stack",
        "Storage",
        "StreamId",
        "SwrContext",
        "TaskThreadPool",
        "TaskThreadPoolBase",
        "TensorImpl",
        "TensorOptions",
        "Test",
        "TestMatchGraph_NodeRef",
        "TestWithParam",
        "TypeIdentifier",
        "TypeMeta",
        "TypeMetaCopy",
        "Types",
        "ZipArchive",
        "DeviceIndex",
        "EigenArrayMap",
        "ConstEigenArrayMap",
        "CudnnActivationDescriptor",
        "CudnnConvolutionDescriptor",
        "ERArrXXf",
        "EArrXf",
        "EArrXi",
        "EArrXXt",
        "AsyncBarrierOp",
        "CudnnFilterDescriptor",
        "CudnnConvolutionFwdAlgo",
        "CudnnConvolutionBwdFilterAlgo",
        "CudnnConvolutionBwdDataAlgo",
        "GPUContext",
        "CudnnDropoutOp",
        "HIPContext",
        "SimpleQueue",
        "CudnnDropoutDescriptor",
        "CudnnRNNDescriptor",
        "CudnnLRNDescriptor",
        "Vector2f",
        "Vector3f",
        "Vector2d",
        "Vector3d",
        "VectorXd",
        "VectorXf",
        "Array2f",
        "Array3f",
        "Array2d",
        "Array3d",
        "ArrayXd",
        "ArrayXf",
        "rotl32",
        "rotl64",
        "getblock32",
        "getblock64",
        "fmix32",
        "fmix64",
        "murmur_hash3_x86_32",
        "murmur_hash3_x86_128",
        "murmur_hash3_x64_128",
        "to",
        "_NoPThreadPoolGuard",
        "HalfAddFunctor",
        "HalfSubFunctor",
        "HalfMulFunctor",
        "HalfDivFunctor",
        "T",
        "TInd",
        "Engine",
        "ConcatBatchMatMulBatchGatherOp",
        "DefaultEngine",
        "declare_compare_op",
        "declare_binary_op",
        "broadcast",
        "inv_std",
        "add_striped_batch",
        "rowwise_max",
        "colwise_max",
        "maximum",
        "gemm",
        "gemm_ex",
        "gemm_batched",
        "gemm_strided_batched",
        "gemv",
        "rand_uniform",
        "rand_fixed_sum",
        "rand_uniform_unique",
        "rand_synthetic_data",
        "rand_gaussian",
        "dot",
        "sum",
        "sum_sqr",
        "select",
        "im_2col",
        "im_2col_nd",
        "col_2im",
        "col_2im_nd",
        "biasCHW",
        "copy_matrix_with_item_size",
        "copy_matrix",
        "copy_matrix_strided",
        "copy_vector",
        "GetSigned",
        "impl_signed",
        "kTimeThreshold",
        "kTimeThreshold",
        "SleepOp",
        "kSleepNetDefString",
        "run_net_and_get_duration",
        "DAGNetTest_TestDAGNetTiming",
        "SimpleNetTest_TestSimpleNetTiming",
        "kSleepNetDefStringReadAfterRead",
        "DAGNetTest_TestDAGNetTimingReadAfterRead",
        "SimpleNetTest_TestSimpleNetTimingReadAfterRead",
        "kSleepNetDefStringWriteAfterWrite",
        "DAGNetTest_TestDAGNetTimingWriteAfterWrite",
        "SimpleNetTest_TestSimpleNetTimingWriteAfterWrite",
        "kSleepNetDefStringWriteAfterRead",
        "DAGNetTest_TestDAGNetTimingWriteAfterRead",
        "SimpleNetTest_TestSimpleNetTimingWriteAfterRead",
        "kSleepNetDefStringControlDependency",
        "DAGNetTest_TestDAGNetTimingControlDependency",
        "wipe_cache",
        "execute_gpu_binary_op_test",
        "MathUtilGPUTest_testAddStripedBatch",
        "MathUtilGPUTest_testReduceMin",
        "MathUtilGPUTest_testReduceMax",
        "MathUtilGPUTest_testCopyVector",
        "kEps",
        "GemmBatchedGPUTest",
        "GemmBatchedGPUTest_GemmBatchedGPUFloatTest",
        "GemmBatchedGPUTest_GemmStridedBatchedGPUFloatTest",
        "BroadcastGPUTest",
        "ZmqContext",
        "ZmqMessage",
        "ZmqSocket",
        "MathROCBLASTest_GemmNoTransNoTrans",
        "MathROCBLASTest_GemmNoTransTrans",
        "MathROCBLASTest_GemvNoTrans",
        "MathROCBLASTest_GemvTrans",
        "transpose",
        "transpose2D",
        "delegate_transpose_2d",
        "transpose_byHPTT",
        "transposeND",
        "transpose_impl",
        "caffe2_specialized_transpose_impl",
        "caffe2_specialized_transpose",
        "caffe2_specialized_nchw2nhwc",
        "caffe2_specialized_nhwc2nchw",
        "ScaleImpl",
        "AxpyImpl",
        "scale_fixed_size",
        "CpuId",
        "get_cpu_id",
        "f1c_",
        "f1d_",
        "f7b_",
        "f7c_",
        "X",
        "C",
        "D",
        "B",
        "E",
        "not",
        "sign",
        "negate",
        "inv",
        "square",
        "cube",
        "is_age_zero_and_altB",
        "div_up",
        "round_up",
        "integer_log2",
        "integer_next_highest_power_of2",
        "caffe2_specialized_increase_index_in_dims",
        "caffe2_specialized_get_index_from_dims",
        "is_identity_permutation",
        "check_reduce_dims",
        "is_rowwise_reduce",
        "is_colwise_reduce",
        "is_both_ends_reduce",
        "caffe2_specialized_compute_broadcast_binary_op_dims",
        "is_rowwise_broadcast_binary_op",
        "is_colwise_broadcast_binary_op",
        "is_both_ends_broadcast_binary_op",
        "is_batch_transpose2D",
        "compute_transpose_axes_for_reduce_op_with_reduce_axes",
        "compute_transpose_axes_for_reduce_op",
        "caffe2_specialized_compute_transposed_strides",
        "CastTest_GetCastDataType",
        "starts_with",
        "ends_with",
        "split",
        "trim",
        "edit_distance",
        "NEXT_UNSAFE",
        "edit_distance_helper",
        "affine_channel",
        "caffe2_specialized_affine_channel"
      ]
    },
    {
      "caffe2-version": [
        "CudnnWorkspace",
        "CudnnState",
        "CudnnWrapper",
        "CAFFE2_COMPILE_TIME_MAX_CUDNN_STATES",
        "COMPILE_TIME_MAX_GPUS",
        "PerGPUCudnnStates",
        "caffe2_version"
      ]
    },
    {
      "caffe2-video": [
        "VIO_BUFFER_SZ",
        "MAX_DECODING_FRAMES",
        "SpecialFps",
        "VideoResType",
        "DecodeType",
        "SampleInterval",
        "Params",
        "AvData",
        "AvDataPtr",
        "DecodedFrame",
        "DecodedAudio",
        "VideoIOContext",
        "VideoMeta",
        "Callback",
        "CallbackImpl",
        "VideoDecoder",
        "free_decoded_data",
        "decode_multiple_clips_from_video",
        "FLowAlgType",
        "FlowDataType",
        "optical_flow_extractor",
        "merge_optical_flow",
        "multi_frame_optical_flow_extractor",
        "VideoInputOp",
        "clip_transformRGB",
        "clip_transform_optical_flow"
      ]
    },
    {
      "caffe2-workspace": [
        "WorkspaceTestFoo",
        "WorkspaceTest_BlobAccess",
        "WorkspaceTest_RunEmptyPlan",
        "WorkspaceTest_Sharing",
        "WorkspaceTest_BlobMapping",
        "for_each_check",
        "WorkspaceTest_ForEach",
        "StopOnSignal",
        "ShouldContinue",
        "WorkspaceBookkeeper",
        "Workspace"
      ]
    },
    {
      "caffe2op-abs": [
        "op_abs_example",
        "AbsFunctor",
        "AbsGradientFunctor",
        "GetAbsGradient"
      ]
    },
    {
      "caffe2op-accum": [
        "AccumulateOp"
      ]
    },
    {
      "caffe2op-accuracy": [
        "AccuracyOp"
      ]
    },
    {
      "caffe2op-acos": [
        "AcosFunctor",
        "AcosGradientFunctor",
        "GetAcosGradient"
      ]
    },
    {
      "caffe2op-activation": [
        "CudnnActivationOpBase",
        "CudnnActivationOp",
        "CudnnActivationGradientOp"
      ]
    },
    {
      "caffe2op-affine": [
        "AffineChannelOp",
        "AffineChannelGradientOp",
        "affine_channel_scale_bias_backwardNCHW",
        "affine_channel_scale_bias_backwardNHWC",
        "GetAffineChannelGradient"
      ]
    },
    {
      "caffe2op-alias": [
        "AliasWithNameOp"
      ]
    },
    {
      "caffe2op-apmeter": [
        "BufferDataType",
        "APMeterOp"
      ]
    },
    {
      "caffe2op-args": [
        "ArgOp",
        "arg_max_reducer_example",
        "ArgMaxReducer",
        "arg_min_reducer_example",
        "ArgMinReducer",
        "compute_arg_impl",
        "infer_tensor"
      ]
    },
    {
      "caffe2op-asin": [
        "AsinFunctor",
        "AsinGradientFunctor",
        "GetAsinGradient"
      ]
    },
    {
      "caffe2op-assert": [
        "assert_op_example",
        "AssertOp"
      ]
    },
    {
      "caffe2op-asyncnet": [
        "AsyncNetBarrierOp"
      ]
    },
    {
      "caffe2op-atan": [
        "AtanFunctor",
        "AtanGradientFunctor",
        "GetAtanGradient"
      ]
    },
    {
      "caffe2op-atomics": [
        "CreateMutexOp",
        "AtomicFetchAddOp",
        "CreateAtomicBoolOp",
        "ConditionalSetAtomicBoolOp",
        "CheckAtomicBoolOp"
      ]
    },
    {
      "caffe2op-batch": [
        "add_inputCPU",
        "add_inputGPU",
        "get_device_type",
        "create_and_run",
        "create_and_run_gradient",
        "check_cpugpuequal",
        "BatchPermutationTest_CHECKCPUGPUEqualGenericDimension",
        "batch_gather_op_example",
        "BatchGatherOp",
        "BatchGatherGradientOp",
        "GetBatchGatherGradient",
        "batch_sparse_to_dense_op_example",
        "BatchSparseToDenseOp",
        "batch_dense_to_sparse_op_example",
        "BatchDenseToSparseOp",
        "GetBatchSparseToDenseGradient",
        "GetBatchDenseToSparseGradient",
        "BatchMatMulOpGPUTest",
        "BatchMatMulOpGPUTest_BatchMatMulOpGPUNormalTest",
        "BatchMatMulOpTest",
        "BatchMatMulOpTest_BatchMatMulOpNormalTest",
        "BatchBoxCoxOp",
        "CachedBuffers",
        "TypedCachedBuffers",
        "delegate_packv_function",
        "delegate_unpackv_function",
        "delegate_simple_binary_function",
        "define_cached_buffers",
        "tile_array_into_vector",
        "BatchMatMulOp",
        "tensor_inference_for_batch_mat_mul",
        "cost_inference_for_batch_mat_mul",
        "GetBatchMatMulGradient",
        "batch_permutation_op_example1",
        "batch_permutation_op_example2",
        "BatchPermutationOp",
        "BatchPermutationGradientOp",
        "batch_permutation_loop",
        "GetBatchPermutationGradient",
        "batch_bucketize_op_example",
        "BatchBucketizeOp",
        "BatchMomentsOp",
        "BatchMomentsGradientOp",
        "GetBatchMomentsGradient"
      ]
    },
    {
      "caffe2op-bbox": [
        "BBoxTransformOp"
      ]
    },
    {
      "caffe2op-bisect": [
        "BisectPercentileOp",
        "BisectPercentileOpEpsilon"
      ]
    },
    {
      "caffe2op-bucketize": [
        "BucketizeOp"
      ]
    },
    {
      "caffe2op-cast": [
        "cast_op_example",
        "CastOp",
        "CastHelper",
        "GetCastGradient"
      ]
    },
    {
      "caffe2op-cbrt": [
        "CbrtFunctor",
        "CbrtGradientFunctor",
        "GetCbrtGradient"
      ]
    },
    {
      "caffe2op-ceil": [
        "ceil_op_test",
        "CeilOp"
      ]
    },
    {
      "caffe2op-channelbackprop": [
        "ChannelBackpropStatsOp"
      ]
    },
    {
      "caffe2op-channelshuffle": [
        "ChannelShuffleOp",
        "ChannelShuffleGradientOp",
        "run_channel_shuffleNCHW",
        "run_channel_shuffleNHWC",
        "GetChannelShuffleGradient"
      ]
    },
    {
      "caffe2op-channelstats": [
        "ChannelStatsOp"
      ]
    },
    {
      "caffe2op-clip": [
        "clip_op_example",
        "ClipOp",
        "ClipGradientOp",
        "GetClipGradient"
      ]
    },
    {
      "caffe2op-collect": [
        "CollectAndDistributeFpnRpnProposalsOp",
        "CollectRpnProposalsOp",
        "DistributeFpnProposalsOp",
        "boxes_area",
        "map_ro_is_to_fpn_levels",
        "sort_and_limit_ro_is_by_scores",
        "arg_sort",
        "rows_where_roi_level_equals"
      ]
    },
    {
      "caffe2op-communicator": [
      ]
    },
    {
      "caffe2op-concatsplit": [
        "split_op_example",
        "kSplitOpInputSize",
        "SplitOp",
        "split_by_lengths_op_example1",
        "split_by_lengths_op_example2",
        "SplitByLengthsOp",
        "concat_op_example1",
        "concat_op_example2",
        "ConcatOp",
        "split_op_dev_infer",
        "tensor_inference_for_split",
        "cost_inference_for_concat",
        "concat_op_dev_infer",
        "tensor_inference_for_concat",
        "GetSplitGradient",
        "GetConcatGradient"
      ]
    },
    {
      "caffe2op-conditional": [
        "ConditionalOp"
      ]
    },
    {
      "caffe2op-conv": [
        "conv_op_example",
        "ConvOp",
        "ConvGradientOp",
        "doc_fn",
        "conv_doc_generator",
        "run_tile_contiguous",
        "reinterleave_rows",
        "reinterleave_multithreaded",
        "ConvTransposeUnpoolBase",
        "AlgorithmsCache",
        "EigenConvOp",
        "CudnnConvTransposeOpBase",
        "CudnnConvTransposeOp",
        "CudnnConvTransposeGradientOp",
        "CudnnConvOpBase",
        "CudnnConvOp",
        "ConvFwdAlgorithmWithCost",
        "CudnnConvGradientOp",
        "ConvBwdFilterAlgorithmWithCost",
        "ConvBwdDataAlgorithmWithCost",
        "kComputeTypesToTry",
        "kComputePassNames",
        "CAFFE2_PAD_HEAD_MORE",
        "ConvPoolOpBase",
        "create_shared_buffer_cpu_context",
        "run_with_shared_buffer_cpu_context",
        "create_shared_buffer_cuda_context",
        "run_with_shared_buffer_cuda_context",
        "add_const_input",
        "add_noise_input",
        "relative_error",
        "compare",
        "rand_int",
        "ConvTransposeMobile_Test",
        "AlgorithmsCacheTest_CachesCorrectly",
        "AlgorithmsCacheTest_KeysDifferIfOneVectorIsEmpty",
        "AlgorithmsCacheTest_KeysDifferIfFlagsAreDifferent",
        "conv_transpose_op_example",
        "ConvTransposeOp",
        "ConvTransposeGradientOp",
        "tensor_inference_for_conv_gradient",
        "cost_inference_for_conv_gradient",
        "GetConvGradient",
        "GetConvTransposeGradient",
        "ConvTransposeMobileOp"
      ]
    },
    {
      "caffe2op-copy": [
        "CopyRowsToTensorOp",
        "CopyRowsToTensorGradientOp",
        "GetCopyRowsToTensorGradient",
        "copy_op_example",
        "CopyOp",
        "CopyOnDeviceLikeOp",
        "CopyFromCPUInputOp",
        "CopyGPUToCPUOp",
        "CopyCPUToGPUOp",
        "GetCopyGradient",
        "GetGPUToCPUGradient",
        "GetCPUToGPUGradient"
      ]
    },
    {
      "caffe2op-cos": [
        "cos_op_example",
        "CosFunctor",
        "CosGradientFunctor",
        "GetCosGradient",
        "CosineEmbeddingCriterionOp",
        "CosineEmbeddingCriterionGradientOp",
        "GetCosineEmbeddingCriterionGradient"
      ]
    },
    {
      "caffe2op-cosh": [
        "cosh_op_example",
        "CoshFunctor",
        "CoshGradientFunctor",
        "GetCoshGradient"
      ]
    },
    {
      "caffe2op-counter": [
        "count_op_example",
        "Counter",
        "CreateCounterOp",
        "ResetCounterOp",
        "CountDownOp",
        "CheckCounterDoneOp",
        "CountUpOp",
        "RetrieveCountOp",
        "CounterSerializer",
        "CounterDeserializer"
      ]
    },
    {
      "caffe2op-couple": [
        "DataCoupleOp"
      ]
    },
    {
      "caffe2op-crash": [
        "CrashOp"
      ]
    },
    {
      "caffe2op-crfviterbi": [
        "rowwise_max_and_arg",
        "colwise_max_and_arg",
        "ViterbiPathOp",
        "SwapBestPathOp"
      ]
    },
    {
      "caffe2op-crossentropy": [
        "LabelCrossEntropyOp",
        "LabelCrossEntropyGradientOp",
        "GetLabelCrossEntropyGradient",
        "MakeTwoClassOp",
        "MakeTwoClassGradientOp",
        "GetMakeTwoClassGradient",
        "SigmoidCrossEntropyWithLogitsOp",
        "SigmoidCrossEntropyWithLogitsGradientOp",
        "GetSigmoidCrossEntropyWithLogitsGradient",
        "WeightedSigmoidCrossEntropyWithLogitsOp",
        "WeightedSigmoidCrossEntropyWithLogitsGradientOp",
        "GetWeightedSigmoidCrossEntropyWithLogitsGradient",
        "cross_entropy_op_example",
        "CrossEntropyOp",
        "CrossEntropyGradientOp",
        "GetCrossEntropyGradient",
        "sigmoid_xent_forward",
        "sigmoid_xent_backward",
        "sigmoid_partition",
        "sigmoid_xent_forward_with_log_d_trick",
        "sigmoid_xent_backward_with_log_d_trick",
        "unjoined_sigmoid_xent_forward",
        "unjoined_sigmoid_xent_backward",
        "label_cross_entropy_example"
      ]
    },
    {
      "caffe2op-ctc": [
        "CTCGreedyDecoderOp",
        "get_tensor_data_ptr",
        "CTCBeamSearchDecoderOp",
        "get_tensor_data_ptr"
      ]
    },
    {
      "caffe2op-cube": [
        "CubeFunctor",
        "CubeGradientFunctor",
        "GetCubeGradient"
      ]
    },
    {
      "caffe2op-dataset": [
        "TLength",
        "TOffset",
        "TreeIteratorFieldDesc",
        "TreeIterator",
        "TreeCursor",
        "TreeWalker",
        "TreeWalkerField",
        "SharedTensorVectorPtr",
        "Shared2DTensorVectorPtr",
        "Tensor2DVector",
        "TensorVectorPtr",
        "SharedTensorVectorPtrSerializer",
        "SharedTensorVectorPtrDeserializer",
        "kDatasetFieldSeparator",
        "kDatasetLengthField",
        "kDatasetGrowthPct",
        "CreateTreeCursorOp",
        "GetCursorOffsetOp",
        "ResetCursorOp",
        "CheckDatasetConsistencyOp",
        "PackRecordsOp",
        "UnPackRecordsOp",
        "ReadNextBatchOp",
        "ComputeOffsetOp",
        "SortAndShuffleOp",
        "ReadRandomBatchOp",
        "append_op_example",
        "AppendOp",
        "AtomicAppendOp",
        "CreateTensorVectorOp",
        "TensorVectorSizeOp",
        "ConcatTensorVectorOp",
        "CollectTensorOp",
        "TrimDatasetOp",
        "TreeCursorSerializer",
        "TreeCursorDeserializer"
      ]
    },
    {
      "caffe2op-deform": [
        "DeformConvOpBase",
        "use_deformable_conv_base_functions",
        "DeformConvOp",
        "DeformConvGradientOp",
        "GetDeformConvGradient"
      ]
    },
    {
      "caffe2op-densevec": [
        "DenseVectorToIdListOp"
      ]
    },
    {
      "caffe2op-dequant": [
        "ByteWeightDequantOp"
      ]
    },
    {
      "caffe2op-distance": [
        "SquaredL2DistanceOp",
        "SquaredL2DistanceGradientOp",
        "GetSquaredL2DistanceGradient",
        "l1_distance_op_example",
        "L1DistanceOp",
        "L1DistanceGradientOp",
        "GetL1DistanceGradient",
        "dot_product_example",
        "DotProductOp",
        "DotProductGradientOp",
        "GetDotProductGradient",
        "DotProductWithPaddingOp",
        "CosineSimilarityOp",
        "cosine_similarity_op_example",
        "CosineSimilarityGradientOp",
        "GetCosineSimilarityGradient",
        "DotProductWithPaddingGradientOp",
        "GetDotProductWithPaddingGradient",
        "tensor_inference_for_dot_product",
        "cost_inference_for_dot_product"
      ]
    },
    {
      "caffe2op-do": [
        "DoOp"
      ]
    },
    {
      "caffe2op-dropout": [
        "dropout_op_example",
        "DropoutOp",
        "DropoutGradientOp",
        "GetDropoutGradient",
        "CudnnDropoutOp",
        "CudnnDropoutGradientOp"
      ]
    },
    {
      "caffe2op-elementwise": [
        "kBroadcastDoc",
        "math_doc_generator",
        "elementwise_op_shape_inference",
        "elementwise_gradient_op_shape_inference",
        "comparison_doc_generator",
        "caffe2_schema_for_binary_comparison_op",
        "logical_doc_generator",
        "caffe2_schema_for_binary_logical_op",
        "bitwise_doc_generator",
        "caffe2_schema_for_binary_bitwise_op",
        "WhereOp",
        "IsMemberOfValueHolder",
        "IsMemberOfOp",
        "is_member_of_op_example",
        "IS_MEMBER_OF_OP_VALUE_TAG",
        "TestableTypes",
        "elementwise_sum_example1",
        "elementwise_sum_example2",
        "ElementwiseSumOp",
        "mul_op_example",
        "MulFunctor",
        "compute_mul_gradient_with_dims",
        "compute_mul_gradient_with_broadcast_size",
        "compute_mul_gradient",
        "GetMulGradient",
        "NumericTypes",
        "IntTypes",
        "BoolTypes",
        "IntBoolTypes",
        "UnaryElementwiseWithArgsOp",
        "UnaryFunctorWithDefaultCtor",
        "UnaryElementwiseOp",
        "BinaryElementwiseWithArgsOp",
        "BinaryElementwiseWithArgsGradientOp",
        "BinaryFunctorWithDefaultCtor",
        "BinaryElementwiseOp",
        "BinaryElementwiseGradientOp",
        "not_op_example",
        "NotFunctor",
        "sign_op_example",
        "SignFunctor",
        "declare_forward_only_binary_functor",
        "SumReduceLikeOp",
        "register_cpu_compare_operator",
        "lt_op_example",
        "le_op_example",
        "gt_op_example",
        "ge_op_example",
        "eq_op_example",
        "ne_op_example",
        "register_cpu_logical_binary_operator",
        "and_op_example",
        "or_op_example",
        "xor_op_example",
        "register_cpu_bitwise_binary_operator",
        "srl_helper",
        "copy_vector_cpu_context_bool",
        "copy_vector_cpu_context_i32",
        "fill_tensor",
        "create_operator_def",
        "define_operator",
        "elementwise_and",
        "elementwise_or",
        "elementwise_xor",
        "elementwise_not",
        "elementwiseEQ",
        "ElementwiseCPUTest_And",
        "ElementwiseTest_Or",
        "ElementwiseTest_Xor",
        "ElementwiseTest_Not",
        "sub_op_example",
        "SubFunctor",
        "GetSubGradient",
        "copy_vector_cuda_context",
        "create_operator_def_cuda_context",
        "ElementwiseGPUTest_And",
        "ElementwiseGPUTest_Or",
        "ElementwiseGPUTest_Xor",
        "elementwise_linear_op_example",
        "ElementwiseLinearOp",
        "ElementwiseLinearGradientOp",
        "GetElementwiseLinearGradient",
        "compute_legacy_broadcast_sizes",
        "compute_binary_broadcast_forward_dims",
        "compute_binary_broadcast_backward_axes",
        "BinaryElementwiseDivGradientWithArgsGradientOp",
        "GetDivGradient",
        "div_op_example",
        "DivFunctor",
        "add_op_example",
        "AddFunctor",
        "GetAddGradient"
      ]
    },
    {
      "caffe2op-elu": [
        "CudnnActivationOpELU",
        "CudnnActivationGradientOpELU",
        "elu_functor_example",
        "EluFunctor",
        "EluGradientFunctor",
        "GetEluGradient"
      ]
    },
    {
      "caffe2op-enforce": [
        "EnforceFiniteOp",
        "EnsureClippedOp",
        "EnsureCPUOutputOp"
      ]
    },
    {
      "caffe2op-erf": [
        "ErfFunctor",
        "ErfGradientFunctor",
        "Erf",
        "ErfGradient",
        "GetErfGradient"
      ]
    },
    {
      "caffe2op-exp": [
        "exp_functor_example",
        "ExpFunctor",
        "GetExpGradient"
      ]
    },
    {
      "caffe2op-expand": [
        "expand_dims_op_example",
        "ExpandDimsOp",
        "squeeze_op_example",
        "SqueezeOp",
        "GetSqueezeGradient",
        "GetExpandDimsGradient",
        "ExpandOp",
        "ExpandGradientOp",
        "GetExpandGradient"
      ]
    },
    {
      "caffe2op-fallbackgpu": [
        "IncrementByOneOp",
        "OperatorFallbackTest_IncrementByOneOp",
        "GPUFallbackOpEx"
      ]
    },
    {
      "caffe2op-featuremaps": [
        "MergeDenseFeatureTensorsOp",
        "MergeSingleScalarFeatureTensorsOp",
        "MergeSingleScalarFeatureTensorsGradientOp",
        "GetMergeSingleScalarFeatureTensorsGradient",
        "MergeSingleListFeatureTensorsOp",
        "GetMergeSingleListFeatureTensorsGradient",
        "MergeSingleListOrMapFeatureTensorsGradientOp",
        "MergeSingleMapFeatureTensorsOp",
        "GetMergeSingleMapFeatureTensorsGradient",
        "MergeMultiScalarFeatureTensorsOp",
        "MergeMultiScalarFeatureTensorsGradientOp",
        "GetMergeMultiScalarFeatureTensorsGradient",
        "MergeMultiListFeatureTensorsOp",
        "GetMergeMultiListFeatureTensorsGradient",
        "MergeMultiMapFeatureTensorsOp",
        "GetMergeMultiMapFeatureTensorsGradient",
        "MergeMultiListOrMapFeatureTensorsGradientOp"
      ]
    },
    {
      "caffe2op-feed": [
        "FeedBlobOp"
      ]
    },
    {
      "caffe2op-fillbytestr": [
        "given_tensor_byte_string_to_uint8_fill_example",
        "GivenTensorByteStringToUInt8FillOp"
      ]
    },
    {
      "caffe2op-filler": [
        "FillerOp",
        "uniform_fill_example_int",
        "uniform_fill_example_float",
        "UniformFillOp",
        "UniqueUniformFillOp",
        "constant_fill_example1",
        "constant_fill_example2",
        "ConstantFillOp",
        "DiagonalFillOp",
        "gaussian_fill_example",
        "GaussianFillOp",
        "xavier_fill_example",
        "XavierFillOp",
        "MSRAFillOp",
        "RangeFillOp",
        "lengths_range_fill_example",
        "LengthsRangeFillOp",
        "filler_tensor_inference"
      ]
    },
    {
      "caffe2op-filltensor": [
        "GivenTensorFillOp",
        "given_tensor_fill_example"
      ]
    },
    {
      "caffe2op-find": [
        "FindOp"
      ]
    },
    {
      "caffe2op-finddup": [
        "FindDuplicateElementsOp",
        "find_duplicate_elements_example"
      ]
    },
    {
      "caffe2op-flatten": [
        "FlattenOp",
        "tensor_inference_for_flatten",
        "flatten_op_example",
        "GetFlattenGradient"
      ]
    },
    {
      "caffe2op-floor": [
        "FloorOp",
        "floor_op_example"
      ]
    },
    {
      "caffe2op-free": [
        "FreeOp"
      ]
    },
    {
      "caffe2op-fullyconnected": [
        "run_fully_connected_op_on_cudadevice",
        "run_fully_connected_gradient_op_on_cudadevice",
        "NoTransposeWeight",
        "DontTransposeWeight",
        "TransposeWeight",
        "FullyConnectedOp",
        "fully_connected_op_example",
        "FullyConnectedGradientOp",
        "GetFCGradient"
      ]
    },
    {
      "caffe2op-fusedrowwise": [
        "FloatToFusedRandRowwiseQuantizedOp",
        "FusedRandRowwiseQuantizedToFloatOp",
        "is_little_endian",
        "ConvertFnType",
        "FloatToFused8BitRowwiseQuantizedOp",
        "Fused8BitRowwiseQuantizedToFloatOp",
        "convertfp_16fp32",
        "convertfp_32fp16",
        "FloatToFusedNBitRowwiseQuantizedOp",
        "FusedNBitRowwiseQuantizedToFloatOp",
        "convertfp_32fp16",
        "is_little_endian",
        "ConvertFnType",
        "FloatToFusedNBitFakeRowwiseQuantizedOp",
        "compress_uniform_simplified_",
        "convertfp_32fp32",
        "convertfp_16fp32",
        "param_search_greedy"
      ]
    },
    {
      "caffe2op-gather": [
        "gather_op_example",
        "GatherOp",
        "GetGatherGradient",
        "calc_output_shape_vector",
        "check_indexarray_range",
        "gather_impl",
        "GatherFused8BitRowwiseOp",
        "GatherRangesToDenseOp",
        "gather_ranges_to_dense_example1",
        "gather_ranges_to_dense_example2"
      ]
    },
    {
      "caffe2op-gelu": [
        "kFastCoeff",
        "GeluFunctor",
        "GeluGradientFunctor",
        "GeluOp",
        "GeluGradientOp",
        "cost_inference_for_gelu",
        "GetGeluGradient"
      ]
    },
    {
      "caffe2op-generateproposals": [
        "BBOX_XFORM_CLIP_DEFAULT",
        "HasScalarType",
        "bbox_transform_upright",
        "bbox_transform_rotated",
        "bbox_transform",
        "bbox_xyxy_to_ctrwh",
        "bbox_ctrwh_to_xyxy",
        "clip_boxes_upright",
        "clip_boxes_rotated",
        "clip_boxes",
        "filter_boxes_upright",
        "filter_boxes_rotated",
        "filter_boxes",
        "add_lin_spaced_input",
        "add_const_input",
        "add_input",
        "add_input_cpu_context",
        "add_input_cudacontext",
        "GenerateProposalsTest_TestRealDownSampledGPU",
        "GenerateProposalsTest_TestRealDownSampledRotatedAngle0GPU",
        "GenerateProposalsTest_TestRealDownSampledRotatedGPU",
        "UtilsBoxesTest_TestBboxTransformRandom",
        "UtilsBoxesTest_TestBboxTransformRotated",
        "UtilsBoxesTest_TestBboxTransformRotatedNormalized",
        "UtilsBoxesTest_ClipRotatedBoxes",
        "ConstTensorView",
        "GenerateProposalsOp",
        "compute_start_index",
        "get_sub_tensor_view",
        "compute_all_anchors",
        "compute_sorted_anchors",
        "proposals_for_one_image",
        "UtilsNMSTest_TestNMS",
        "UtilsNMSTest_TestNMS1",
        "UtilsNMSTest_TestSoftNMS",
        "UtilsNMSTest_TestNMSRotatedAngle0",
        "UtilsNMSTest_TestSoftNMSRotatedAngle0",
        "UtilsNMSTest_RotatedBBoxOverlaps",
        "nms_gpu_upright",
        "RotatedBox",
        "nms_gpu_rotated",
        "nms_gpu",
        "nms_cpu_upright",
        "soft_nms_cpu_upright",
        "INTERSECT_NONE",
        "INTERSECT_PARTIAL",
        "INTERSECT_FULL",
        "RotatedRect",
        "bbox_to_rotated_rect",
        "cross_2d",
        "rotated_rect_intersection_pts",
        "convex_hull_graham",
        "polygon_area",
        "rotated_rect_intersection",
        "bbox_intersection_rotated",
        "bbox_overlaps_rotated",
        "nms_cpu_rotated",
        "soft_nms_cpu_rotated",
        "nms_cpu_with_indices",
        "nms_cpu",
        "soft_nms_cpu_with_indices",
        "soft_nms_cpu",
        "UtilsNMSTest_TestNMSGPU",
        "generate_random_boxes",
        "generate_random_rotated_boxes",
        "UtilsNMSTest_TestPerfNMS",
        "UtilsNMSTest_GPUEqualsCPUCorrectnessTest",
        "UtilsNMSTest_TestNMSGPURotatedAngle0",
        "UtilsNMSTest_TestPerfRotatedNMS",
        "add_const_input",
        "add_lin_spaced_input",
        "add_input",
        "GenerateProposalsTest_TestComputeAllAnchors",
        "GenerateProposalsTest_TestComputeSortedAnchors",
        "GenerateProposalsTest_TestComputeAllAnchorsRotated",
        "GenerateProposalsTest_TestComputeSortedAnchorsRotated",
        "GenerateProposalsTest_TestEmpty",
        "GenerateProposalsTest_TestRealDownSampled",
        "GenerateProposalsTest_TestRealDownSampledRotatedAngle0",
        "GenerateProposalsTest_TestRealDownSampledRotated"
      ]
    },
    {
      "caffe2op-glu": [
        "GluOp",
        "sigmoid"
      ]
    },
    {
      "caffe2op-groupnorm": [
        "GroupNormOp",
        "GroupNormGradientOp",
        "compute_internal_gradients",
        "compute_internal_gradients_f32_nchw",
        "compute_internal_gradients_f32_nhwc",
        "compute_gradient_fused_params",
        "group_norm_backward_i32_nchw",
        "group_norm_backward_f32_nhwc",
        "gamma_beta_backward",
        "GetGroupNormGradient"
      ]
    },
    {
      "caffe2op-gru": [
        "sigmoid",
        "host_tanh",
        "gru_unit",
        "gru_unit_gradient",
        "GRUUnitOp",
        "GRUUnitGradientOp",
        "GetGRUUnitGradient"
      ]
    },
    {
      "caffe2op-halffloat": [
        "Float16_SimpleTest",
        "Float16_UniformDistributionTest",
        "FloatToHalfOp",
        "HalfToFloatOp",
        "Float16ConstantFillOp",
        "Float16UniformFillOp",
        "float16_filler_tensor_inference",
        "float_to_float16_ref",
        "float_16to_float_ref",
        "GetFloatToHalfGradient",
        "GetHalfToFloatGradient"
      ]
    },
    {
      "caffe2op-hardsigmoid": [
        "HardSigmoidFunctor",
        "HardSigmoidGradientFunctor",
        "cost_inference_for_hard_sigmoid",
        "hard_sigmoid_example",
        "GetHardSigmoidGradient"
      ]
    },
    {
      "caffe2op-heatmap": [
        "HeatmapMaxKeypointOp"
      ]
    },
    {
      "caffe2op-histogram": [
        "HistogramOp",
        "HistogramOpOutputs"
      ]
    },
    {
      "caffe2op-hsoftmax": [
        "HSoftmaxOpBase",
        "HSoftmaxOp",
        "HSoftmaxGradientOp",
        "HSoftmaxSearchOp",
        "HuffmanTreeHierarchyOp",
        "huffman_tree_hierarchy",
        "GetHSoftmaxGradient"
      ]
    },
    {
      "caffe2op-i8quantized": [
        "Int8AddOp",
        "Int8ResizeNearestOp",
        "Int8ConvOp",
        "Int8ReshapeOp",
        "Int8LeakyReluOp",
        "Int8SliceOp",
        "int8_slice_op_example",
        "add_error_tolerance",
        "q",
        "biasq",
        "dq",
        "biasdq",
        "expect_tensor_eq",
        "expect_tensor_approx_eq",
        "int_8copy",
        "add_input",
        "random_int",
        "Int8TransposeOp",
        "Int8ConvTransposeOp",
        "Int8FlattenOp",
        "Int8ReluOp",
        "Int8ConcatOp",
        "Int8SigmoidOp",
        "int_8dequantize",
        "Int8DequantizeOp",
        "initQNNPACK",
        "multiply_by_quantized_multiplier_smaller_than_one",
        "round",
        "round",
        "round",
        "quantize_uint8",
        "quantize_multiplier_smaller_than_one",
        "quantize_multiplier_greater_than_one",
        "multiply_by_quantized_multiplier_greater_than_one",
        "calculate_input_radius",
        "Activation",
        "activation_limits",
        "Int8ChannelShuffleOp",
        "Int8SoftmaxOp",
        "Int8AveragePoolOp",
        "Int8_ReLU",
        "Int8_DISABLED_LeakyReLU",
        "Int8_Softmax",
        "Int8_Sigmoid",
        "Int8_MaxPool",
        "Int8_AveragePool",
        "Int8_ResizeNearest",
        "Int8_ChannelShuffle",
        "Int8_Concat",
        "Int8_Add",
        "Int8_SumRelu",
        "setq",
        "biassetq",
        "Int8_Conv",
        "Int8_Grouped1x1Conv",
        "Int8_Conv2",
        "Int8_DepthwiseConv",
        "Int8_DepthwiseConv3x3",
        "Int8_DepthwiseConv5x5",
        "Int8_ConvTranspose",
        "Int8_FC",
        "Int8_GivenTensorFill",
        "Int8_GivenIntTensorFill",
        "Int8_QuantDeQuant",
        "Int8_Reshape",
        "Int8_Flatten",
        "Int8_Slice",
        "Int8GivenTensorFillOp",
        "Int8GivenIntTensorFillOp",
        "Int8MaxPoolOp",
        "PreCalc",
        "pre_calc_for_bilinear_interpolate",
        "rOIAlign_forward",
        "Int8RoIAlignOp",
        "Int8FCOp",
        "Int8QuantizeOp",
        "int_8quantize"
      ]
    },
    {
      "caffe2op-if": [
        "IfOp"
      ]
    },
    {
      "caffe2op-im2col": [
        "Im2ColOp",
        "GetIm2ColGradient",
        "im2col_tensor_inference_function",
        "Col2ImOp",
        "GetCol2ImGradient"
      ]
    },
    {
      "caffe2op-index": [
        "IndexKeyTypes",
        "IndexBase",
        "Index",
        "IndexCreateOp",
        "IndexGetOp",
        "IndexLoadOp",
        "IndexStoreOp",
        "IndexFreezeOp",
        "IndexSizeOp",
        "IndexSerializer",
        "IndexDeserializer"
      ]
    },
    {
      "caffe2op-indexhash": [
        "IndexHashOp"
      ]
    },
    {
      "caffe2op-inference": [
        "fc_shape_inference",
        "cost_inference_for_fc",
        "fCGradient_shape_inference",
        "cost_inference_for_fcgradient"
      ]
    },
    {
      "caffe2op-info": [
        "TensorInfo"
      ]
    },
    {
      "caffe2op-instancenorm": [
        "instance_norm_op_example",
        "InstanceNormOp",
        "InstanceNormGradientOp",
        "compute_fused_params",
        "instance_norm_forwardNHWC",
        "compute_internal_gradientsNHWC",
        "instance_norm_backwardNCHW",
        "instance_norm_backwardNHWC",
        "gamma_beta_backward",
        "GetInstanceNormGradient"
      ]
    },
    {
      "caffe2op-integralimage": [
        "IntegralImageOp",
        "IntegralImageGradientOp",
        "GetIntegralImageGradient"
      ]
    },
    {
      "caffe2op-isempty": [
        "empty_op_example",
        "IsEmptyOp"
      ]
    },
    {
      "caffe2op-jsd": [
        "BernoulliJSDOp",
        "BernoulliJSDGradientOp",
        "klog_threshold",
        "logit",
        "entropy",
        "GetBernoulliJSDGradient"
      ]
    },
    {
      "caffe2op-keysplit": [
        "KeySplitOp"
      ]
    },
    {
      "caffe2op-lastnwindow": [
        "LastNWindowCollectorOp"
      ]
    },
    {
      "caffe2op-layernorm": [
        "LayerNormOp",
        "LayerNormGradientOp",
        "GetLayerNormGradient"
      ]
    },
    {
      "caffe2op-leakyrelu": [
        "leaky_relu_example",
        "LeakyReluOp",
        "LeakyReluGradientOp",
        "GetLeakyReluGradient"
      ]
    },
    {
      "caffe2op-lengthspad": [
        "LengthsPadOp"
      ]
    },
    {
      "caffe2op-lengthsplit": [
        "LengthsSplitOp"
      ]
    },
    {
      "caffe2op-lengthsreduce": [
        "SparseLengthsFused8BitRowwiseOp",
        "SparseLengthsFused8BitRowwiseOpIndices",
        "CPUSparseLengthsReductionOp",
        "CPUSparseLengthsReductionOpTags",
        "TTSparseLengthsSumOp",
        "TTSparseLengthsSumGradientOp",
        "SparseLengthsSumOp",
        "SparseLengthsWeightedSumOp",
        "SparseLengthsMeanOp",
        "format_doc",
        "GradientNeedIndices",
        "SparseLengthsSumDef",
        "SparseLengthsWeightedSumDef",
        "SparseLengthsMeanDef",
        "GetTTSparseLengthsGradient",
        "SparseLengthsConfig",
        "SparseLengthsFusedNBitRowwiseOpTags",
        "SparseLengthsFusedNBitRowwiseOp",
        "SparseLengthsSumSparseLookupOp",
        "SparseLengthsSumSparseLookupOpTags",
        "SparseLengthsNBitRowwiseSparseOp",
        "SparseLengthsNBitRowwiseSparseOpTags",
        "kEqualityThreshold",
        "FloatToRowwiseQuantized8BitsOp",
        "Rowwise8BitQuantizedToFloatOp",
        "SparseLengths8BitsRowwiseOp",
        "SparseLengths8BitsRowwiseOpIdx"
      ]
    },
    {
      "caffe2op-lengthstile": [
        "lengths_tile_op_example",
        "LengthsTileOp",
        "GetLengthsTileGradient"
      ]
    },
    {
      "caffe2op-lengthstop": [
        "LengthsTopKOp",
        "LengthsTopKGradientOp",
        "GetLengthsTopKGradient"
      ]
    },
    {
      "caffe2op-listwisel2r": [
        "LambdaRankNdcgOp",
        "LambdaRankNdcgGradientOp",
        "arg_sort",
        "GetLambdaRankNdcgGradient",
        "pairwise_diff",
        "cwise_sigm",
        "cwise_gt",
        "cwise_lt",
        "cwise_sign"
      ]
    },
    {
      "caffe2op-loadsave": [
        "BlobState",
        "build_blob_name_from_db_key",
        "process_blob",
        "prepare_blob",
        "update_blob_states",
        "validate_blob_states",
        "DBExistsOp",
        "db_exists_op_example",
        "LoadOp",
        "load_op_example",
        "SaveOp",
        "save_op_example",
        "format_string",
        "CheckpointOp",
        "load_tensor_inference",
        "get_blob_options"
      ]
    },
    {
      "caffe2op-locallyconnected": [
        "LocallyConnectedOp",
        "LocallyConnectedGradientOp",
        "GetLocallyConnectedGradient",
        "ShapeParams",
        "CUDAConvNetShapeParams",
        "set_column_buffer_shape"
      ]
    },
    {
      "caffe2op-localresponsenormalization": [
        "CudnnLRNOp",
        "CudnnLRNGradientOp",
        "LRNOpBase",
        "LRNOp",
        "LRNGradientOp",
        "lrn_op_example",
        "GetLRNGradient"
      ]
    },
    {
      "caffe2op-log": [
        "LogFunctor",
        "log_op_example",
        "GetLogGradient"
      ]
    },
    {
      "caffe2op-logit": [
        "LogitFunctor",
        "LogitGradientOp",
        "GetLogitGradient"
      ]
    },
    {
      "caffe2op-loss": [
        "AveragedLoss",
        "AveragedLossGradient",
        "averaged_loss_op_example",
        "GetAveragedLossGradient"
      ]
    },
    {
      "caffe2op-lpnorm": [
        "LpNormOp",
        "LpNormGradientOp",
        "lp_norm_example",
        "GetLpNormGradient"
      ]
    },
    {
      "caffe2op-lppool": [
        "LpPoolFunctor",
        "lp_pool_op_example",
        "GetPoolGradient"
      ]
    },
    {
      "caffe2op-lstm": [
        "lSTMUnit",
        "lstm_unit_gradient",
        "LSTMUnitOp",
        "LSTMUnitGradientOp",
        "GetLSTMUnitGradient",
        "TensorTuple",
        "CellParams",
        "LSTMCell",
        "LayerOutput",
        "Layer",
        "FullLSTMLayer",
        "FullBidirectionalLSTMLayerTypes",
        "FullBidirectionalLSTMLayer",
        "apply_layer_stack",
        "lstm_impl",
        "gather_params",
        "InferenceLSTMOp",
        "pair_vec",
        "unpair_vec",
        "matmul",
        "linear",
        "chunk",
        "unbind",
        "cat",
        "stack",
        "sigmoid",
        "tanh",
        "add",
        "mul"
      ]
    },
    {
      "caffe2op-map": [
        "MapType64To64",
        "MapType64To32",
        "MapType32To32",
        "MapType32To64",
        "CreateMapOp",
        "KeyValueToMapOp",
        "MapToKeyValueOp",
        "MapSerializer",
        "MapDeserializer"
      ]
    },
    {
      "caffe2op-marginrank": [
        "MarginRankingCriterionOp",
        "MarginRankingCriterionGradientOp",
        "GetMarginRankingCriterionGradient"
      ]
    },
    {
      "caffe2op-mask": [
        "boolean_unmask_op_example1",
        "boolean_unmask_op_example2",
        "boolean_unmask_op_example3",
        "boolean_unmask_op_example4",
        "BooleanUnmaskOp",
        "boolean_mask_op_example",
        "BooleanMaskOp",
        "BooleanMaskOpGradient",
        "SequenceMaskOp",
        "boolean_mask_lengths_op_example",
        "BooleanMaskLengthsOp",
        "GetBooleanMaskGradient",
        "minf",
        "mask_with_functor",
        "repeated_mask_with_functor",
        "SequenceFunctor",
        "WindowFunctor",
        "UpperFunctor",
        "LowerFunctor",
        "UpperDiagFunctor",
        "LowerDiagFunctor",
        "GetSequenceMaskGradient",
        "add_scalar_input",
        "BooleanUnmaskTest_Test"
      ]
    },
    {
      "caffe2op-matmul": [
        "mat_mul_op_example",
        "MatMulOp",
        "GetMatMulGradient"
      ]
    },
    {
      "caffe2op-maxpool": [
        "MaxPoolWithIndexOp",
        "MaxPoolWithIndexGradientOp"
      ]
    },
    {
      "caffe2op-mean": [
        "mean_op_example",
        "MeanOp",
        "MeanGradientOp",
        "GetMeanGradient"
      ]
    },
    {
      "caffe2op-mergeid": [
        "MergeIdListsOp"
      ]
    },
    {
      "caffe2op-minmax": [
        "max_op_example",
        "MaxOp",
        "min_op_example",
        "MinOp",
        "SelectGradientOpBase",
        "MaxGradientOp",
        "MinGradientOp",
        "GetMaxGradient",
        "GetMinGradient"
      ]
    },
    {
      "caffe2op-mish": [
        "MishFunctor",
        "MishGradientOp",
        "GetMishGradient"
      ]
    },
    {
      "caffe2op-mod": [
        "ModOp",
        "mod_op_example"
      ]
    },
    {
      "caffe2op-moments": [
        "MomentsOp",
        "MomentsGradientOp",
        "GetMomentsGradient"
      ]
    },
    {
      "caffe2op-multiclass": [
        "MultiClassAccuracyOp"
      ]
    },
    {
      "caffe2op-nanreplace": [
        "ReplaceNaNOp"
      ]
    },
    {
      "caffe2op-negative": [
        "NegativeFunctor",
        "negative_op_example",
        "GetNegativeGradient"
      ]
    },
    {
      "caffe2op-negativegradient": [
        "NegateGradientOp",
        "GetNegateGradientGradient"
      ]
    },
    {
      "caffe2op-ngram": [
        "NGramFromCategoricalOp"
      ]
    },
    {
      "caffe2op-nmsbox": [
        "BoxWithNMSLimitOp"
      ]
    },
    {
      "caffe2op-normalize": [
        "NormalizeL1Op",
        "NormalizePlanarYUVOp",
        "KEPS",
        "NormalizeOp",
        "NormalizeGradientOp",
        "GetNormalizeGradient"
      ]
    },
    {
      "caffe2op-numpytile": [
        "NumpyTileOp"
      ]
    },
    {
      "caffe2op-onehot": [
        "one_hot_op_example",
        "OneHotOp",
        "BatchOneHotOp",
        "BatchBucketOneHotOp",
        "tensor_inference_for_batch_one_hot",
        "tensor_inference_for_bucket_batch_one_hot",
        "cost_inference_for_batch_one_hot",
        "SegmentOneHotOp"
      ]
    },
    {
      "caffe2op-onnxwhile": [
        "OnnxWhileOpLocalScope",
        "ONNXWhileOp"
      ]
    },
    {
      "caffe2op-orderswitch": [
        "NHWC2NCHWOp",
        "NCHW2NHWCOp",
        "GetNHWC2NCHWGradient",
        "GetNCHW2NHWCGradient",
        "CudnnOrderSwithOpBase",
        "CudnnNHWC2NCHWOp",
        "CudnnNCHW2NHWCOp"
      ]
    },
    {
      "caffe2op-packrnnseq": [
        "PackRNNSequenceOpBase",
        "GetPackRNNSequenceGradient",
        "GetUnpackRNNSequenceGradient"
      ]
    },
    {
      "caffe2op-packsegments": [
        "PackSegmentsOp",
        "UnpackSegmentsOp",
        "GetPackSegmentsGradient",
        "GetUnpackSegmentsGradient"
      ]
    },
    {
      "caffe2op-pad": [
        "PadMode",
        "PadImageOp",
        "PadImageGradientOp",
        "string_to_pad_mode",
        "GetPadImageGradient"
      ]
    },
    {
      "caffe2op-partition": [
        "modulo_partition",
        "GatherByKeyOp",
        "PartitionOpBase",
        "PartitionOp",
        "LengthsPartitionOp",
        "GetGatherByKeyGradient"
      ]
    },
    {
      "caffe2op-percentile": [
        "PercentileOp"
      ]
    },
    {
      "caffe2op-perplexity": [
        "PerplexityOp"
      ]
    },
    {
      "caffe2op-plt": [
        "PiecewiseLinearTransformOp",
        "PiecewiseLinearTransformOpFloatCPU"
      ]
    },
    {
      "caffe2op-pool": [
        "compute_average_pool_gradient1d",
        "compute_average_pool_gradient_1df32nchw",
        "compute_average_pool_gradient_1df32nhwc",
        "compute_average_pool_gradient2d",
        "compute_average_pool_gradient_2df32nchw",
        "compute_average_pool_gradient_2df32nhwc",
        "compute_average_pool_gradient3d",
        "compute_average_pool_gradient_3df32nchw",
        "compute_average_pool_gradient_3df32nhwc",
        "run_average_pool_gradient1d",
        "run_average_pool_gradient2D",
        "run_average_pool_gradient3D",
        "compute_max_pool_gradient1d",
        "compute_max_pool_gradient_1df32nchw",
        "compute_max_pool_gradient_1df32nhwc",
        "compute_max_pool_gradient2d",
        "compute_max_pool_gradient_2df32nchw",
        "compute_max_pool_gradient_2df32nhwc",
        "compute_max_pool_gradient3d",
        "compute_max_pool_gradient_3df32nchw",
        "compute_max_pool_gradient_3df32nhwc",
        "run_max_pool_gradient1D",
        "run_max_pool_gradient2D",
        "run_max_pool_gradient3D",
        "GetPoolGradient",
        "PoolOp",
        "PoolGradientOp",
        "average_pool_op_example",
        "AveragePoolFunctor",
        "max_pool_op_example",
        "MaxPoolFunctor",
        "compute_average_pool1d",
        "compute_average_pool_1df32nchw",
        "compute_average_pool_1df32nhwc",
        "compute_average_pool2d",
        "compute_average_pool_2d_f32_nchw",
        "compute_average_pool_2df32nhwc",
        "compute_average_pool3d",
        "compute_average_pool_3df32nchw",
        "compute_average_pool_3df32nhwc",
        "run_average_pool1D",
        "run_average_pool2D",
        "run_average_pool3D",
        "compute_max_pool1d",
        "compute_max_pool_1df32nchw",
        "compute_max_pool_1df32nhwc",
        "compute_max_pool2d",
        "compute_max_pool_2d_f32_nchw",
        "compute_max_pool_2df32nhwc",
        "compute_max_pool3d",
        "compute_max_pool_3df32nchw",
        "compute_max_pool_3df32nhwc",
        "run_max_pool1D",
        "run_max_pool2D",
        "run_max_pool3D",
        "caffe2_specialized_average_pool_functor_forward",
        "caffe2_specialized_max_pool_functor_forward",
        "average_pool_doc_generator",
        "max_pool_doc_generator",
        "set_tensor_descriptor",
        "CudnnPoolOp",
        "CudnnPoolGradientOp",
        "CudnnAveragePoolFunctor",
        "CudnnMaxPoolFunctor",
        "avg_pool_neon4x4p0s_0plane",
        "max_pool_neon2x2p0s_0plane",
        "is_neon4x4_p0s0_eligible",
        "is_neon2x2p0s_0eligible",
        "run_neon_average_pool4x4p0s0NCHW"
      ]
    },
    {
      "caffe2op-pow": [
        "pow_op_example",
        "FactorThisShitOut",
        "SameTypeAsInput",
        "PowOp",
        "eigen_pow",
        "EigenPowFunctor",
        "GetPowGradient"
      ]
    },
    {
      "caffe2op-prefetch": [
        "PrefetchOperator",
        "PrefetchOperatorTrait"
      ]
    },
    {
      "caffe2op-prelu": [
        "prelu_op_example",
        "PReluOp",
        "PReluGradientOp",
        "run_neon_prelu",
        "GetPReluGradient"
      ]
    },
    {
      "caffe2op-prepend": [
        "PrependDimOp",
        "MergeDimOp",
        "GetPrependDimGradient"
      ]
    },
    {
      "caffe2op-quantdecode": [
        "decode",
        "REGISTER_DECODER",
        "decode_general",
        "QuantDecodeRunTy",
        "QuantDecodeOp",
        "quant_decode_gradient_op_example",
        "QuantDecodeGradientOp",
        "GetQuantDecodeGradient"
      ]
    },
    {
      "caffe2op-quantile": [
        "QuantileOp"
      ]
    },
    {
      "caffe2op-rankloss": [
        "PairWiseLossOp",
        "PairWiseLossGradientOp",
        "log_logit",
        "GetPairWiseLossGradient"
      ]
    },
    {
      "caffe2op-reciprocal": [
        "ReciprocalFunctor",
        "reciprocal_functor_example",
        "ReciprocalGradientFunctor",
        "GetReciprocalGradient"
      ]
    },
    {
      "caffe2op-reduce": [
        "ReduceOp",
        "ReduceGradientOp",
        "MinReducer",
        "MaxReducer",
        "SumReducer",
        "MeanReducer",
        "L1Reducer",
        "L2Reducer",
        "compute_reduce_min_max_gradient",
        "reduce_shape_inference",
        "reduce_sum_example",
        "reduce_mean_example",
        "reduce_l1_example",
        "reduce_l2_example",
        "GetReduceGradient",
        "SumReduceDimsOp",
        "SumReduceDimsGradientOp",
        "MaxReduceDimsOp",
        "MaxReduceDimsGradientOp",
        "reduction_op_shape_inference",
        "reduce_front_max_example",
        "reduce_back_max_example",
        "GetReduceFrontMaxGradient",
        "GetReduceBackMaxGradient",
        "reduction_op_shape_inference",
        "reduce_front_mean_example",
        "GetReduceFrontMeanGradient",
        "reduce_back_mean_example",
        "GetReduceBackMeanGradient",
        "reduce_front_sum",
        "GetReduceFrontSumGradient",
        "reduce_back_sum_example",
        "GetReduceBackSumGradient",
        "reduction_op_shape_inference",
        "SumElementsOp",
        "sum_elements_op_example",
        "SumElementsIntOp",
        "SumElementsGradientOp",
        "SumSqrElementsOp",
        "MaxReductionOp",
        "colwise_max_op_example",
        "rowwise_max_op_example",
        "MaxReductionGradientOp",
        "GetSumElementsGradient",
        "GetRowwiseMaxGradient",
        "GetColwiseMaxGradient",
        "SumRangeReducer",
        "SumRangeReducerGradient",
        "SumRangeReducerDef",
        "LogSumExpRangeReducer",
        "LogSumExpRangeReducerGradient",
        "LogSumExpRangeReducerDef",
        "LogMeanExpRangeReducer",
        "LogMeanExpRangeReducerGradient",
        "LogMeanExpRangeReducerDef",
        "MeanRangeReducer",
        "MeanRangeReducerGradient",
        "MeanRangeReducerDef",
        "MaxRangeReducer",
        "MaxRangeReducerGradient",
        "MaxRangeReducerDef",
        "BaseReducer",
        "BaseReducerMeta",
        "BaseReducerGradient",
        "BaseReducerGradientMeta",
        "SumReducer",
        "SumReducerGradient",
        "SumReducerDef",
        "WeightedSumReducer",
        "Reducer",
        "WeightedSumReducerMeta",
        "WeightedSumReducerGradient",
        "WeightedSumReducerGradientMeta",
        "WeightedSumReducerDef",
        "MeanReducer",
        "MeanReducerGradient",
        "MeanReducerDef",
        "MaxReducer",
        "MaxReducerGradient",
        "MaxReducerDef"
      ]
    },
    {
      "caffe2op-relu": [
        "relu_functor_example",
        "ReluFunctor",
        "ReluGradientFunctor",
        "cost_inference_for_relu",
        "GetReluGradient",
        "ReluNFunctor",
        "ReluNGradientFunctor",
        "cost_inference_for_relun",
        "GetReluNGradient"
      ]
    },
    {
      "caffe2op-remove": [
        "RemoveDataBlocksOp"
      ]
    },
    {
      "caffe2op-reservoir": [
        "ReservoirSamplingOp"
      ]
    },
    {
      "caffe2op-reshape": [
        "reshape_op_example",
        "ReshapeOp",
        "GetReshapeGradient",
        "add_const_input"
      ]
    },
    {
      "caffe2op-resize": [
        "ResizeNearest3DOp",
        "ResizeNearest3DGradientOp",
        "resize_nearest_3dnchw2x",
        "GetResizeNearest3DGradient",
        "ResizeNearest3DOpFloatCPU",
        "ResizeNearestOp",
        "ResizeNearestGradientOp",
        "resize_nearest_nchw2x",
        "GetResizeNearestGradient",
        "ResizeNearestOpFloatCPU"
      ]
    },
    {
      "caffe2op-reversepacked": [
        "ReversePackedSegsOp",
        "GetReversePackedSegsGradient"
      ]
    },
    {
      "caffe2op-rmac": [
        "RMACRegionsOp"
      ]
    },
    {
      "caffe2op-rms": [
        "RMSNormOp",
        "RMSNormGradientOp",
        "GetRMSNormGradient"
      ]
    },
    {
      "caffe2op-rnn": [
        "RecurrentNetworkBlobFetcherOp",
        "CUDARecurrentNetworkExecutor",
        "create_rnnexecutor",
        "TensorDescriptors",
        "RecurrentBaseOp",
        "use_recurrent_base_functions",
        "RecurrentOp",
        "RecurrentParamOpMode",
        "RecurrentParamAccessOp",
        "RecurrentGradientOp",
        "GetRecurrentGradient",
        "RNNNetOperator",
        "OpTask",
        "Param",
        "RecurrentInput",
        "RecurrentGradient",
        "OffsetAlias",
        "Link",
        "ScratchWorkspaces",
        "update_timestep_blob",
        "apply_offset_alias",
        "repeat_copy",
        "initialize_recurrent_input",
        "RecurrentNetworkOp",
        "RecurrentNetworkGradientOp",
        "AccumulateInputGradientOp",
        "RNNApplyLinkOp",
        "GetRecurrentNetworkGradient",
        "get_recurrent_mapping",
        "prepend_ops",
        "add_apply_link_ops",
        "extract_links",
        "RecurrentNetworkExecutorBaseTrait",
        "RecurrentNetworkExecutorBase",
        "ThreadedRecurrentNetworkExecutor",
        "create_rnnexecutor"
      ]
    },
    {
      "caffe2op-roialign": [
        "RoIAlignGradientOp",
        "bilinear_interpolate_gradient",
        "add",
        "roi_align_backward_feature",
        "GetRoIAlignGradient",
        "RoIAlignOp",
        "BilinearInterpolationParam",
        "make_bilinear_interpolation_params",
        "add_const_input",
        "add_input",
        "add_input_cpu_context",
        "add_input_cudacontext",
        "GetDeviceType",
        "rand_int",
        "TestParams",
        "create_and_run",
        "RoiAlignTest_CheckCPUGPUEqual",
        "RoIAlignRotatedOp",
        "PreCalc",
        "pre_calc_for_bilinear_interpolate",
        "roi_align_rotated_forward",
        "RoIAlignRotatedOpFloatCPU",
        "RoIAlignRotatedGradientOp",
        "GetRoIAlignRotatedGradient"
      ]
    },
    {
      "caffe2op-roipool": [
        "RoIPoolOp",
        "RoIPoolGradientOp",
        "GetRoIPoolGradient"
      ]
    },
    {
      "caffe2op-rowmul": [
        "RowMulOp",
        "ReduceTailSumOp",
        "GetRowMulGradient"
      ]
    },
    {
      "caffe2op-rsqrt": [
        "RsqrtFunctor",
        "RsqrtGradientFunctor",
        "GetRsqrtGradient"
      ]
    },
    {
      "caffe2op-scale": [
        "ScaleBlobsOp",
        "ScaleOp",
        "GetScaleGradient"
      ]
    },
    {
      "caffe2op-scope": [
        "WorkspaceStack",
        "CreateScopeOp",
        "HasScopeOp"
      ]
    },
    {
      "caffe2op-segmentreduction": [
        "BaseInputAccessor",
        "AbstractSortedSegmentRangeOp",
        "AbstractSortedSegmentRangeGradientOp",
        "AbstractSortedSegmentRangeDef",
        "GetSortedSegmentRangeGradient",
        "AbstractReduceFrontOrBackOp",
        "AbstractReduceFrontOrBackGradientOp",
        "_InputTags",
        "AbstractReduceFrontDef",
        "GetReduceFrontGradient",
        "AbstractReduceBackDef",
        "GetReduceBackGradient",
        "AbstractSortedSegmentOp",
        "AbstractSortedSegmentOpInputTags",
        "AbstractSortedSegmentGradientOp",
        "HasOriginalInputs",
        "AbstractSortedSegmentGradientOpInputTags",
        "SegmentOpGetGradient",
        "AbstractSortedSegmentDef",
        "AbstractSparseSortedSegmentDef",
        "AbstractUnsortedSegmentOp",
        "AbstractUnsortedSegmentOpInputTags",
        "AbstractUnsortedSegmentGradientOp",
        "AbstractUnsortedSegmentGradientOpInputTags",
        "AbstractUnsortedSegmentDef",
        "AbstractSparseUnsortedSegmentDef",
        "AbstractLengthsOp",
        "AbstractLengthsOpInputTags",
        "AbstractLengthsGradientOp",
        "AbstractLengthsWithMainInputGradientOp",
        "AbstractLengthsWithMainInputAndForwardOutputGradientOp",
        "LengthsOpGetGradient",
        "AbstractLengthsDef",
        "AbstractSparseLengthsDef",
        "cost_inference_for_sparse_lengths",
        "HasForwardOp",
        "LengthsMaxCPUOp",
        "lengths_max_extra_op_example",
        "lengths_mean_extra_op_example",
        "lengths_sum_extra_op",
        "lengths_weighted_sum_extra_op_example",
        "format_doc",
        "equal",
        "register_segment_def_schema_gradient_only",
        "register_segment_def"
      ]
    },
    {
      "caffe2op-selfbinning": [
        "SelfBinningHistogramOp"
      ]
    },
    {
      "caffe2op-selu": [
        "selu_op_example",
        "SeluOp",
        "SeluGradientOp",
        "GetSeluGradient"
      ]
    },
    {
      "caffe2op-sequence": [
        "GatherPaddingOp",
        "remove_padding_op_example",
        "RemovePaddingOp",
        "add_padding_op_example",
        "AddPaddingOp",
        "PadEmptySamplesOp",
        "GetAddPaddingGradient",
        "GetRemovePaddingGradient"
      ]
    },
    {
      "caffe2op-shape": [
        "shape_op_example",
        "ShapeOp"
      ]
    },
    {
      "caffe2op-sigmoid": [
        "sigmoid_functor_example",
        "SigmoidFunctor",
        "SigmoidGradientFunctor",
        "GetSigmoidGradient"
      ]
    },
    {
      "caffe2op-sin": [
        "SinFunctor",
        "SinGradientFunctor",
        "sin_op_example",
        "GetSinGradient"
      ]
    },
    {
      "caffe2op-sinh": [
      ]
    },
    {
      "caffe2op-sinusoid": [
        "SinusoidPositionEncodingOp"
      ]
    },
    {
      "caffe2op-slice": [
        "slice_impl",
        "slice_op_example",
        "SliceOp",
        "SliceGradientOp",
        "GetSliceGradient"
      ]
    },
    {
      "caffe2op-softmax": [
        "SoftmaxOp",
        "SoftmaxGradientOp",
        "softmax_op_example",
        "softmax_example_op",
        "GetSoftmaxGradient",
        "NUM_DESCRIPTORS",
        "GRADIENT_NUM_DESCRIPTORS",
        "BOTTOM_DESC_ID",
        "TOP_DESC_ID",
        "TOP_GRADIENT_DESC_ID",
        "CudnnSoftmaxOp",
        "CudnnSoftmaxGradientOp",
        "softmaxcpu",
        "caffe2_specialized_softmax_cpu",
        "SoftmaxWithLossOp",
        "SoftmaxWithLossGradientOp",
        "softmax_with_loss_op_example1",
        "softmax_with_loss_op_example2",
        "DONT_CARE",
        "GetSoftmaxWithLossGradient"
      ]
    },
    {
      "caffe2op-softplus": [
        "SoftplusOp",
        "SoftplusGradientOp",
        "softplus_example",
        "GetSoftplusGradient"
      ]
    },
    {
      "caffe2op-softsign": [
        "SoftsignFunctor",
        "softsign_functor_example",
        "SoftsignGradientFunctor",
        "GetSoftsignGradient"
      ]
    },
    {
      "caffe2op-spacebatch": [
        "space_to_batch",
        "batch_to_space",
        "SpaceBatchOpBase",
        "space_to_batch_op_example",
        "SpaceToBatchOp",
        "BatchToSpaceOp",
        "batch_to_space_op_example",
        "GetSpaceToBatchGradient",
        "GetBatchToSpaceGradient"
      ]
    },
    {
      "caffe2op-sparsedropout": [
        "SparseDropoutWithReplacementOp",
        "sparse_dropout_with_replacement_op_example"
      ]
    },
    {
      "caffe2op-sparselpreg": [
        "SparseLpRegularizerOp"
      ]
    },
    {
      "caffe2op-sparsenormalize": [
        "SparseNormalizeOp",
        "float_16to_float_ref"
      ]
    },
    {
      "caffe2op-sparsetodense": [
        "SparseToDenseMaskBase",
        "SparseToDenseMaskOp",
        "SparseToDenseMaskGradientOp",
        "GetSparseToDenseMaskGradient",
        "SparseToDenseOp",
        "GetSparseToDenseGradient"
      ]
    },
    {
      "caffe2op-spatialbatchnorm": [
        "SpatialBNOp",
        "SpatialBNGradientOp",
        "cost_inference_for_spatialBN",
        "GetSpatialBNGradient"
      ]
    },
    {
      "caffe2op-spatialsoftmax": [
        "SpatialSoftmaxWithLossOp",
        "SpatialSoftmaxWithLossGradientOp",
        "DONT_CARE",
        "GetSoftmaxWithLossGradient"
      ]
    },
    {
      "caffe2op-sqr": [
        "SqrFunctor",
        "sqr_functor_example",
        "GetSqrGradient"
      ]
    },
    {
      "caffe2op-sqrt": [
        "square_root_divide_op",
        "SquareRootDivideOp",
        "GetSquareRootDivideGradient",
        "SqrtFunctor",
        "sqrt_op_example",
        "GetSqrtGradient"
      ]
    },
    {
      "caffe2op-stats": [
        "TemplatePutOp",
        "register_templated_stat_put_op",
        "StatRegistryCreateOp",
        "StatRegistryExportOp",
        "StatRegistryUpdateOp",
        "TimerStat",
        "TimerInstance",
        "TimerBeginOp",
        "TimerEndOp",
        "TimerGetAndEndOp",
        "timer_get_and_end_op_example",
        "TimerGetOp"
      ]
    },
    {
      "caffe2op-stopgradient": [
        "StopGradientOp"
      ]
    },
    {
      "caffe2op-string": [
        "ForEach",
        "StringElementwiseOp",
        "StringJoinOp",
        "StartsWith",
        "EndsWith",
        "StrEquals",
        "Prefix",
        "Suffix",
        "StringJoinOpTest",
        "StringJoinOpTest_testString1DJoin",
        "StringJoinOpTest_testString2DJoin",
        "StringJoinOpTest_testFloat1DJoin",
        "StringJoinOpTest_testFloat2DJoin",
        "StringJoinOpTest_testLong2DJoin"
      ]
    },
    {
      "caffe2op-stump": [
        "StumpFuncOp",
        "StumpFuncIndexOp"
      ]
    },
    {
      "caffe2op-stylizer": [
        "to_v4_f32",
        "to_f32_v4_x4",
        "clamp",
        "add_mean_and_clamp",
        "convert_narrow_and_pack",
        "PackedInt8BGRANHWCToNCHWCStylizerPreprocessOp",
        "clamped_cast",
        "BRGNCHWCToPackedInt8BGRAStylizerDeprocessOp"
      ]
    },
    {
      "caffe2op-summarize": [
        "kSummaryzeOpExtension",
        "SummarizeOp"
      ]
    },
    {
      "caffe2op-swish": [
        "SwishGradientOp",
        "SwishFunctor",
        "GetSwishGradient"
      ]
    },
    {
      "caffe2op-tan": [
        "TanFunctor",
        "TanGradientFunctor",
        "GetTanGradient"
      ]
    },
    {
      "caffe2op-tanh": [
        "GetTanhGradient",
        "TanhFunctor",
        "TanhGradientFunctor",
        "tanh_op_example"
      ]
    },
    {
      "caffe2op-tensorprotos": [
      ]
    },
    {
      "caffe2op-textfile": [
        "TextFileReaderInstance",
        "CreateTextFileReaderOp",
        "convert",
        "TextFileReaderReadOp",
        "TextFileReaderUtilsTest_TokenizeTest",
        "Token",
        "TokenizedString",
        "CharRange",
        "StringProvider",
        "Tokenizer",
        "BufferedTokenizer",
        "FileReader"
      ]
    },
    {
      "caffe2op-thresholdedrelu": [
        "ThresholdedReluOp",
        "ThresholdedReluGradientOp",
        "GetThresholdedReluGradient"
      ]
    },
    {
      "caffe2op-tile": [
        "TileOp",
        "tile_op_example",
        "TileGradientOp",
        "GetTileGradient"
      ]
    },
    {
      "caffe2op-topk": [
        "top_k_op_example",
        "TopKOp",
        "TopKGradientOp",
        "ValueComp",
        "get_topK",
        "set_top_kgradient",
        "GetTopKGradient",
        "FlexibleTopKOp",
        "FlexibleTopKGradientOp",
        "GetFlexibleTopKGradient",
        "ValueCmp"
      ]
    },
    {
      "caffe2op-transpose": [
        "CudnnTransposeOp",
        "transpose_op_example",
        "TransposeOp",
        "GetTransposeGradient"
      ]
    },
    {
      "caffe2op-tt": [
        "TTLinearOp",
        "TTLinearGradientOp"
      ]
    },
    {
      "caffe2op-unique": [
        "UniqueOp"
      ]
    },
    {
      "caffe2op-unsafecoalesce": [
        "UnsafeCoalesceOp"
      ]
    },
    {
      "caffe2op-upsample": [
        "UpsampleBilinearOp",
        "UpsampleBilinearGradientOp",
        "GetUpsampleBilinearGradient"
      ]
    },
    {
      "caffe2op-utility": [
        "add_const_input",
        "add_const_input",
        "NanCheckOp",
        "GetNanCheckGradient",
        "IsNanOp",
        "WallClockTimeOp",
        "kPrintFileExtension",
        "PrintOp",
        "AliasOp",
        "EnsureDenseOp",
        "flatten_to_vec_op_example",
        "FlattenToVecOp",
        "ResizeLikeOp",
        "SumOp",
        "cost_inference_for_sum",
        "WeightedSumOp",
        "WeightedSumGradientOp",
        "ScatterWeightedSumOp",
        "RunnerType",
        "RunnerMap",
        "ScatterAssignOp",
        "ScatterOp",
        "lengths_to_segment_ids_op",
        "LengthsToSegmentIdsOp",
        "LengthsToRangesOp",
        "LengthsToOffsetsOp",
        "SegmentIdsToLengthsOp",
        "SegmentIdsToRangesOp",
        "LengthsToWeightsOp",
        "HasElementsOp",
        "has_elements_op_example",
        "size_op_example",
        "SizeOp",
        "lengths_to_shape_op_example",
        "LengthsToShapeOp",
        "gather_ranges_op_example",
        "GatherRangesOp",
        "LengthsGatherOp",
        "lengths_gather_op_example",
        "AccumulateHistogramOp",
        "range_op_example",
        "RangeOp",
        "ThrowExceptionOp",
        "ThrowChildThreadExceptionOp",
        "LogFatalOp",
        "FailOp",
        "weighted_sum_shape_inference",
        "cost_inference_for_weighted_sum",
        "GetEnsureDenseGradient",
        "GetAliasGradient",
        "GetSumGradient",
        "GetWeightedSumGradient",
        "GetFlattenToVecGradient",
        "kCONV_CUDNN_WORKSPACE_LIMIT_BYTES",
        "manually_specified_number_of_algorithms",
        "log_cu_dnnperf_stats"
      ]
    },
    {
      "caffe2op-variablepad": [
        "variable_length_sequence_padding",
        "VariableLengthSequencePaddingOp"
      ]
    },
    {
      "caffe2op-weightedmultisample": [
        "WeightedMultiSamplingOp"
      ]
    },
    {
      "caffe2op-weightedsample": [
        "WeightedSampleOp"
      ]
    },
    {
      "caffe2op-while": [
        "WhileOp"
      ]
    },
    {
      "caffe2op-workspace": [
        "GetAllBlobNamesOp"
      ]
    },
    {
      "caffe2op-zerog": [
        "ZeroGradientOp",
        "GetZeroGradientOpGradient"
      ]
    }
]
