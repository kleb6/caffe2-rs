// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pytorch/caffe2/proto/metanet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct ModelInfo {
    // message fields
    project: ::protobuf::SingularField<::std::string::String>,
    modelClass: ::protobuf::SingularField<::std::string::String>,
    version: ::protobuf::SingularField<::std::string::String>,
    predictorType: ::protobuf::SingularField<::std::string::String>,
    modelId: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModelInfo {
    fn default() -> &'a ModelInfo {
        <ModelInfo as ::protobuf::Message>::default_instance()
    }
}

impl ModelInfo {
    pub fn new() -> ModelInfo {
        ::std::default::Default::default()
    }

    // optional string project = 1;


    pub fn get_project(&self) -> &str {
        match self.project.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_project(&mut self) {
        self.project.clear();
    }

    pub fn has_project(&self) -> bool {
        self.project.is_some()
    }

    // Param is passed by value, moved
    pub fn set_project(&mut self, v: ::std::string::String) {
        self.project = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project(&mut self) -> &mut ::std::string::String {
        if self.project.is_none() {
            self.project.set_default();
        }
        self.project.as_mut().unwrap()
    }

    // Take field
    pub fn take_project(&mut self) -> ::std::string::String {
        self.project.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string modelClass = 2;


    pub fn get_modelClass(&self) -> &str {
        match self.modelClass.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_modelClass(&mut self) {
        self.modelClass.clear();
    }

    pub fn has_modelClass(&self) -> bool {
        self.modelClass.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modelClass(&mut self, v: ::std::string::String) {
        self.modelClass = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modelClass(&mut self) -> &mut ::std::string::String {
        if self.modelClass.is_none() {
            self.modelClass.set_default();
        }
        self.modelClass.as_mut().unwrap()
    }

    // Take field
    pub fn take_modelClass(&mut self) -> ::std::string::String {
        self.modelClass.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string version = 3;


    pub fn get_version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string predictorType = 4;


    pub fn get_predictorType(&self) -> &str {
        match self.predictorType.as_ref() {
            Some(v) => &v,
            None => "SINGLE_PREDICTOR",
        }
    }
    pub fn clear_predictorType(&mut self) {
        self.predictorType.clear();
    }

    pub fn has_predictorType(&self) -> bool {
        self.predictorType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_predictorType(&mut self, v: ::std::string::String) {
        self.predictorType = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_predictorType(&mut self) -> &mut ::std::string::String {
        if self.predictorType.is_none() {
            self.predictorType.set_default();
        }
        self.predictorType.as_mut().unwrap()
    }

    // Take field
    pub fn take_predictorType(&mut self) -> ::std::string::String {
        self.predictorType.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string modelId = 5;


    pub fn get_modelId(&self) -> &str {
        match self.modelId.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_modelId(&mut self) {
        self.modelId.clear();
    }

    pub fn has_modelId(&self) -> bool {
        self.modelId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modelId(&mut self, v: ::std::string::String) {
        self.modelId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modelId(&mut self) -> &mut ::std::string::String {
        if self.modelId.is_none() {
            self.modelId.set_default();
        }
        self.modelId.as_mut().unwrap()
    }

    // Take field
    pub fn take_modelId(&mut self) -> ::std::string::String {
        self.modelId.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ModelInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.project)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.modelClass)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.predictorType)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.modelId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.project.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.modelClass.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.predictorType.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.modelId.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.project.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.modelClass.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.predictorType.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.modelId.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModelInfo {
        ModelInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project",
                |m: &ModelInfo| { &m.project },
                |m: &mut ModelInfo| { &mut m.project },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "modelClass",
                |m: &ModelInfo| { &m.modelClass },
                |m: &mut ModelInfo| { &mut m.modelClass },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ModelInfo| { &m.version },
                |m: &mut ModelInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "predictorType",
                |m: &ModelInfo| { &m.predictorType },
                |m: &mut ModelInfo| { &mut m.predictorType },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "modelId",
                |m: &ModelInfo| { &m.modelId },
                |m: &mut ModelInfo| { &mut m.modelId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModelInfo>(
                "ModelInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModelInfo {
        static instance: ::protobuf::rt::LazyV2<ModelInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModelInfo::new)
    }
}

impl ::protobuf::Clear for ModelInfo {
    fn clear(&mut self) {
        self.project.clear();
        self.modelClass.clear();
        self.version.clear();
        self.predictorType.clear();
        self.modelId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModelInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlobsMap {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    pub value: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlobsMap {
    fn default() -> &'a BlobsMap {
        <BlobsMap as ::protobuf::Message>::default_instance()
    }
}

impl BlobsMap {
    pub fn new() -> BlobsMap {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string value = 2;


    pub fn get_value(&self) -> &[::std::string::String] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BlobsMap {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.value {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlobsMap {
        BlobsMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &BlobsMap| { &m.key },
                |m: &mut BlobsMap| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &BlobsMap| { &m.value },
                |m: &mut BlobsMap| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlobsMap>(
                "BlobsMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlobsMap {
        static instance: ::protobuf::rt::LazyV2<BlobsMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlobsMap::new)
    }
}

impl ::protobuf::Clear for BlobsMap {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlobsMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlobsMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NetsMap {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    pub value: ::protobuf::SingularPtrField<super::caffe2::NetDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetsMap {
    fn default() -> &'a NetsMap {
        <NetsMap as ::protobuf::Message>::default_instance()
    }
}

impl NetsMap {
    pub fn new() -> NetsMap {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .caffe2.NetDef value = 2;


    pub fn get_value(&self) -> &super::caffe2::NetDef {
        self.value.as_ref().unwrap_or_else(|| <super::caffe2::NetDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::caffe2::NetDef) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::caffe2::NetDef {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::caffe2::NetDef {
        self.value.take().unwrap_or_else(|| super::caffe2::NetDef::new())
    }
}

impl ::protobuf::Message for NetsMap {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetsMap {
        NetsMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &NetsMap| { &m.key },
                |m: &mut NetsMap| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::caffe2::NetDef>>(
                "value",
                |m: &NetsMap| { &m.value },
                |m: &mut NetsMap| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NetsMap>(
                "NetsMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NetsMap {
        static instance: ::protobuf::rt::LazyV2<NetsMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NetsMap::new)
    }
}

impl ::protobuf::Clear for NetsMap {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetsMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetsMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlansMap {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    pub value: ::protobuf::SingularPtrField<super::caffe2::PlanDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlansMap {
    fn default() -> &'a PlansMap {
        <PlansMap as ::protobuf::Message>::default_instance()
    }
}

impl PlansMap {
    pub fn new() -> PlansMap {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .caffe2.PlanDef value = 2;


    pub fn get_value(&self) -> &super::caffe2::PlanDef {
        self.value.as_ref().unwrap_or_else(|| <super::caffe2::PlanDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::caffe2::PlanDef) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::caffe2::PlanDef {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::caffe2::PlanDef {
        self.value.take().unwrap_or_else(|| super::caffe2::PlanDef::new())
    }
}

impl ::protobuf::Message for PlansMap {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlansMap {
        PlansMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &PlansMap| { &m.key },
                |m: &mut PlansMap| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::caffe2::PlanDef>>(
                "value",
                |m: &PlansMap| { &m.value },
                |m: &mut PlansMap| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlansMap>(
                "PlansMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlansMap {
        static instance: ::protobuf::rt::LazyV2<PlansMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlansMap::new)
    }
}

impl ::protobuf::Clear for PlansMap {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlansMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlansMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringMap {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringMap {
    fn default() -> &'a StringMap {
        <StringMap as ::protobuf::Message>::default_instance()
    }
}

impl StringMap {
    pub fn new() -> StringMap {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string value = 2;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for StringMap {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringMap {
        StringMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &StringMap| { &m.key },
                |m: &mut StringMap| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &StringMap| { &m.value },
                |m: &mut StringMap| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringMap>(
                "StringMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringMap {
        static instance: ::protobuf::rt::LazyV2<StringMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringMap::new)
    }
}

impl ::protobuf::Clear for StringMap {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetaNetDef {
    // message fields
    pub blobs: ::protobuf::RepeatedField<BlobsMap>,
    pub nets: ::protobuf::RepeatedField<NetsMap>,
    pub modelInfo: ::protobuf::SingularPtrField<ModelInfo>,
    pub plans: ::protobuf::RepeatedField<PlansMap>,
    pub applicationSpecificInfo: ::protobuf::RepeatedField<StringMap>,
    pub blobsOrder: ::protobuf::RepeatedField<::std::string::String>,
    pub preLoadBlobs: ::protobuf::RepeatedField<::std::string::String>,
    pub tensorBoundShapes: ::protobuf::SingularPtrField<super::caffe2::TensorBoundShapes>,
    pub requestOnlyEmbeddings: ::protobuf::RepeatedField<::std::string::String>,
    pub aotConfig: ::protobuf::SingularPtrField<super::caffe2::AOTConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaNetDef {
    fn default() -> &'a MetaNetDef {
        <MetaNetDef as ::protobuf::Message>::default_instance()
    }
}

impl MetaNetDef {
    pub fn new() -> MetaNetDef {
        ::std::default::Default::default()
    }

    // repeated .caffe2.BlobsMap blobs = 1;


    pub fn get_blobs(&self) -> &[BlobsMap] {
        &self.blobs
    }
    pub fn clear_blobs(&mut self) {
        self.blobs.clear();
    }

    // Param is passed by value, moved
    pub fn set_blobs(&mut self, v: ::protobuf::RepeatedField<BlobsMap>) {
        self.blobs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blobs(&mut self) -> &mut ::protobuf::RepeatedField<BlobsMap> {
        &mut self.blobs
    }

    // Take field
    pub fn take_blobs(&mut self) -> ::protobuf::RepeatedField<BlobsMap> {
        ::std::mem::replace(&mut self.blobs, ::protobuf::RepeatedField::new())
    }

    // repeated .caffe2.NetsMap nets = 2;


    pub fn get_nets(&self) -> &[NetsMap] {
        &self.nets
    }
    pub fn clear_nets(&mut self) {
        self.nets.clear();
    }

    // Param is passed by value, moved
    pub fn set_nets(&mut self, v: ::protobuf::RepeatedField<NetsMap>) {
        self.nets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nets(&mut self) -> &mut ::protobuf::RepeatedField<NetsMap> {
        &mut self.nets
    }

    // Take field
    pub fn take_nets(&mut self) -> ::protobuf::RepeatedField<NetsMap> {
        ::std::mem::replace(&mut self.nets, ::protobuf::RepeatedField::new())
    }

    // optional .caffe2.ModelInfo modelInfo = 3;


    pub fn get_modelInfo(&self) -> &ModelInfo {
        self.modelInfo.as_ref().unwrap_or_else(|| <ModelInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_modelInfo(&mut self) {
        self.modelInfo.clear();
    }

    pub fn has_modelInfo(&self) -> bool {
        self.modelInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modelInfo(&mut self, v: ModelInfo) {
        self.modelInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modelInfo(&mut self) -> &mut ModelInfo {
        if self.modelInfo.is_none() {
            self.modelInfo.set_default();
        }
        self.modelInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_modelInfo(&mut self) -> ModelInfo {
        self.modelInfo.take().unwrap_or_else(|| ModelInfo::new())
    }

    // repeated .caffe2.PlansMap plans = 4;


    pub fn get_plans(&self) -> &[PlansMap] {
        &self.plans
    }
    pub fn clear_plans(&mut self) {
        self.plans.clear();
    }

    // Param is passed by value, moved
    pub fn set_plans(&mut self, v: ::protobuf::RepeatedField<PlansMap>) {
        self.plans = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plans(&mut self) -> &mut ::protobuf::RepeatedField<PlansMap> {
        &mut self.plans
    }

    // Take field
    pub fn take_plans(&mut self) -> ::protobuf::RepeatedField<PlansMap> {
        ::std::mem::replace(&mut self.plans, ::protobuf::RepeatedField::new())
    }

    // repeated .caffe2.StringMap applicationSpecificInfo = 5;


    pub fn get_applicationSpecificInfo(&self) -> &[StringMap] {
        &self.applicationSpecificInfo
    }
    pub fn clear_applicationSpecificInfo(&mut self) {
        self.applicationSpecificInfo.clear();
    }

    // Param is passed by value, moved
    pub fn set_applicationSpecificInfo(&mut self, v: ::protobuf::RepeatedField<StringMap>) {
        self.applicationSpecificInfo = v;
    }

    // Mutable pointer to the field.
    pub fn mut_applicationSpecificInfo(&mut self) -> &mut ::protobuf::RepeatedField<StringMap> {
        &mut self.applicationSpecificInfo
    }

    // Take field
    pub fn take_applicationSpecificInfo(&mut self) -> ::protobuf::RepeatedField<StringMap> {
        ::std::mem::replace(&mut self.applicationSpecificInfo, ::protobuf::RepeatedField::new())
    }

    // repeated string blobsOrder = 6;


    pub fn get_blobsOrder(&self) -> &[::std::string::String] {
        &self.blobsOrder
    }
    pub fn clear_blobsOrder(&mut self) {
        self.blobsOrder.clear();
    }

    // Param is passed by value, moved
    pub fn set_blobsOrder(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.blobsOrder = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blobsOrder(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.blobsOrder
    }

    // Take field
    pub fn take_blobsOrder(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.blobsOrder, ::protobuf::RepeatedField::new())
    }

    // repeated string preLoadBlobs = 7;


    pub fn get_preLoadBlobs(&self) -> &[::std::string::String] {
        &self.preLoadBlobs
    }
    pub fn clear_preLoadBlobs(&mut self) {
        self.preLoadBlobs.clear();
    }

    // Param is passed by value, moved
    pub fn set_preLoadBlobs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.preLoadBlobs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_preLoadBlobs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.preLoadBlobs
    }

    // Take field
    pub fn take_preLoadBlobs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.preLoadBlobs, ::protobuf::RepeatedField::new())
    }

    // optional .caffe2.TensorBoundShapes tensorBoundShapes = 8;


    pub fn get_tensorBoundShapes(&self) -> &super::caffe2::TensorBoundShapes {
        self.tensorBoundShapes.as_ref().unwrap_or_else(|| <super::caffe2::TensorBoundShapes as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tensorBoundShapes(&mut self) {
        self.tensorBoundShapes.clear();
    }

    pub fn has_tensorBoundShapes(&self) -> bool {
        self.tensorBoundShapes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tensorBoundShapes(&mut self, v: super::caffe2::TensorBoundShapes) {
        self.tensorBoundShapes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tensorBoundShapes(&mut self) -> &mut super::caffe2::TensorBoundShapes {
        if self.tensorBoundShapes.is_none() {
            self.tensorBoundShapes.set_default();
        }
        self.tensorBoundShapes.as_mut().unwrap()
    }

    // Take field
    pub fn take_tensorBoundShapes(&mut self) -> super::caffe2::TensorBoundShapes {
        self.tensorBoundShapes.take().unwrap_or_else(|| super::caffe2::TensorBoundShapes::new())
    }

    // repeated string requestOnlyEmbeddings = 9;


    pub fn get_requestOnlyEmbeddings(&self) -> &[::std::string::String] {
        &self.requestOnlyEmbeddings
    }
    pub fn clear_requestOnlyEmbeddings(&mut self) {
        self.requestOnlyEmbeddings.clear();
    }

    // Param is passed by value, moved
    pub fn set_requestOnlyEmbeddings(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.requestOnlyEmbeddings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requestOnlyEmbeddings(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.requestOnlyEmbeddings
    }

    // Take field
    pub fn take_requestOnlyEmbeddings(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.requestOnlyEmbeddings, ::protobuf::RepeatedField::new())
    }

    // optional .caffe2.AOTConfig aotConfig = 10;


    pub fn get_aotConfig(&self) -> &super::caffe2::AOTConfig {
        self.aotConfig.as_ref().unwrap_or_else(|| <super::caffe2::AOTConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_aotConfig(&mut self) {
        self.aotConfig.clear();
    }

    pub fn has_aotConfig(&self) -> bool {
        self.aotConfig.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aotConfig(&mut self, v: super::caffe2::AOTConfig) {
        self.aotConfig = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aotConfig(&mut self) -> &mut super::caffe2::AOTConfig {
        if self.aotConfig.is_none() {
            self.aotConfig.set_default();
        }
        self.aotConfig.as_mut().unwrap()
    }

    // Take field
    pub fn take_aotConfig(&mut self) -> super::caffe2::AOTConfig {
        self.aotConfig.take().unwrap_or_else(|| super::caffe2::AOTConfig::new())
    }
}

impl ::protobuf::Message for MetaNetDef {
    fn is_initialized(&self) -> bool {
        for v in &self.blobs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nets {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modelInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.plans {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.applicationSpecificInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tensorBoundShapes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aotConfig {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blobs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nets)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.modelInfo)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plans)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.applicationSpecificInfo)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.blobsOrder)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.preLoadBlobs)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tensorBoundShapes)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.requestOnlyEmbeddings)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.aotConfig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.blobs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.nets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.modelInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.plans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.applicationSpecificInfo {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.blobsOrder {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.preLoadBlobs {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if let Some(ref v) = self.tensorBoundShapes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.requestOnlyEmbeddings {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if let Some(ref v) = self.aotConfig.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.blobs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.nets {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.modelInfo.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.plans {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.applicationSpecificInfo {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.blobsOrder {
            os.write_string(6, &v)?;
        };
        for v in &self.preLoadBlobs {
            os.write_string(7, &v)?;
        };
        if let Some(ref v) = self.tensorBoundShapes.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.requestOnlyEmbeddings {
            os.write_string(9, &v)?;
        };
        if let Some(ref v) = self.aotConfig.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaNetDef {
        MetaNetDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlobsMap>>(
                "blobs",
                |m: &MetaNetDef| { &m.blobs },
                |m: &mut MetaNetDef| { &mut m.blobs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NetsMap>>(
                "nets",
                |m: &MetaNetDef| { &m.nets },
                |m: &mut MetaNetDef| { &mut m.nets },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModelInfo>>(
                "modelInfo",
                |m: &MetaNetDef| { &m.modelInfo },
                |m: &mut MetaNetDef| { &mut m.modelInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlansMap>>(
                "plans",
                |m: &MetaNetDef| { &m.plans },
                |m: &mut MetaNetDef| { &mut m.plans },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StringMap>>(
                "applicationSpecificInfo",
                |m: &MetaNetDef| { &m.applicationSpecificInfo },
                |m: &mut MetaNetDef| { &mut m.applicationSpecificInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blobsOrder",
                |m: &MetaNetDef| { &m.blobsOrder },
                |m: &mut MetaNetDef| { &mut m.blobsOrder },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "preLoadBlobs",
                |m: &MetaNetDef| { &m.preLoadBlobs },
                |m: &mut MetaNetDef| { &mut m.preLoadBlobs },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::caffe2::TensorBoundShapes>>(
                "tensorBoundShapes",
                |m: &MetaNetDef| { &m.tensorBoundShapes },
                |m: &mut MetaNetDef| { &mut m.tensorBoundShapes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requestOnlyEmbeddings",
                |m: &MetaNetDef| { &m.requestOnlyEmbeddings },
                |m: &mut MetaNetDef| { &mut m.requestOnlyEmbeddings },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::caffe2::AOTConfig>>(
                "aotConfig",
                |m: &MetaNetDef| { &m.aotConfig },
                |m: &mut MetaNetDef| { &mut m.aotConfig },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetaNetDef>(
                "MetaNetDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetaNetDef {
        static instance: ::protobuf::rt::LazyV2<MetaNetDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetaNetDef::new)
    }
}

impl ::protobuf::Clear for MetaNetDef {
    fn clear(&mut self) {
        self.blobs.clear();
        self.nets.clear();
        self.modelInfo.clear();
        self.plans.clear();
        self.applicationSpecificInfo.clear();
        self.blobsOrder.clear();
        self.preLoadBlobs.clear();
        self.tensorBoundShapes.clear();
        self.requestOnlyEmbeddings.clear();
        self.aotConfig.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetaNetDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaNetDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"pytorch/caffe2/proto/metanet.proto\x12\x06caffe2\x1a!pytorch/caffe2/\
    proto/caffe2.proto\"\xb1\x01\n\tModelInfo\x12\x18\n\x07project\x18\x01\
    \x20\x01(\tR\x07project\x12\x1e\n\nmodelClass\x18\x02\x20\x01(\tR\nmodel\
    Class\x12\x18\n\x07version\x18\x03\x20\x01(\tR\x07version\x126\n\rpredic\
    torType\x18\x04\x20\x01(\t:\x10SINGLE_PREDICTORR\rpredictorType\x12\x18\
    \n\x07modelId\x18\x05\x20\x01(\tR\x07modelId\"2\n\x08BlobsMap\x12\x10\n\
    \x03key\x18\x01\x20\x02(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x03(\t\
    R\x05value\"A\n\x07NetsMap\x12\x10\n\x03key\x18\x01\x20\x02(\tR\x03key\
    \x12$\n\x05value\x18\x02\x20\x02(\x0b2\x0e.caffe2.NetDefR\x05value\"C\n\
    \x08PlansMap\x12\x10\n\x03key\x18\x01\x20\x02(\tR\x03key\x12%\n\x05value\
    \x18\x02\x20\x02(\x0b2\x0f.caffe2.PlanDefR\x05value\"3\n\tStringMap\x12\
    \x10\n\x03key\x18\x01\x20\x02(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x02(\tR\x05value\"\xf3\x03\n\nMetaNetDef\x12&\n\x05blobs\x18\x01\x20\
    \x03(\x0b2\x10.caffe2.BlobsMapR\x05blobs\x12#\n\x04nets\x18\x02\x20\x03(\
    \x0b2\x0f.caffe2.NetsMapR\x04nets\x12/\n\tmodelInfo\x18\x03\x20\x01(\x0b\
    2\x11.caffe2.ModelInfoR\tmodelInfo\x12&\n\x05plans\x18\x04\x20\x03(\x0b2\
    \x10.caffe2.PlansMapR\x05plans\x12K\n\x17applicationSpecificInfo\x18\x05\
    \x20\x03(\x0b2\x11.caffe2.StringMapR\x17applicationSpecificInfo\x12\x1e\
    \n\nblobsOrder\x18\x06\x20\x03(\tR\nblobsOrder\x12\"\n\x0cpreLoadBlobs\
    \x18\x07\x20\x03(\tR\x0cpreLoadBlobs\x12G\n\x11tensorBoundShapes\x18\x08\
    \x20\x01(\x0b2\x19.caffe2.TensorBoundShapesR\x11tensorBoundShapes\x124\n\
    \x15requestOnlyEmbeddings\x18\t\x20\x03(\tR\x15requestOnlyEmbeddings\x12\
    /\n\taotConfig\x18\n\x20\x01(\x0b2\x11.caffe2.AOTConfigR\taotConfigJ\xa6\
    \x0f\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\
    \x03\0\x12\x03\x02\0+\n\x08\n\x01\x02\x12\x03\x04\0\x0f\n\n\n\x02\x04\0\
    \x12\x04\x06\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x11\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x07\x02\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x07\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x0b\x11\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x07\x12\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x07\x1c\x1d\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x02!\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\x08\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x08\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x08\x12\x1c\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x08\x1f\x20\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\t\x02\x1e\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\t\x02\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\t\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\t\x12\x19\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t\x1c\x1d\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\n\x02E\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\
    \n\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\n\x12\x1f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\n\
    \"#\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\n$D\n\x0c\n\x05\x04\0\x02\x03\
    \x07\x12\x03\n0B\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0b\x02\x1e\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0b\x12\x19\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b\x1c\x1d\n\n\n\x02\x04\x01\x12\
    \x04\x0e\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x10\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x0f\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x0f\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0f\x12\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0f\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x02\x1c\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\x10\x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x12\
    \x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10\x1a\x1b\n\n\n\x02\x04\
    \x02\x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x0f\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x14\x0b\x11\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x12\x15\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\x14\x18\x19\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x15\
    \x02\x1c\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x15\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03\x15\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x15\x12\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x15\x1a\x1b\
    \n\n\n\x02\x04\x03\x12\x04\x18\0\x1b\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x18\x08\x10\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x19\x02\x1a\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03\x19\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x19\x12\x15\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03\x19\x18\x19\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03\x1a\x02\x1d\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x1a\x02\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1a\x0b\x12\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03\x1a\x13\x18\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\
    \x1a\x1b\x1c\n\n\n\x02\x04\x04\x12\x04\x1d\0\x20\x01\n\n\n\x03\x04\x04\
    \x01\x12\x03\x1d\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1e\x02\x1a\n\
    \x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03\x1e\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1e\x12\
    \x15\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1e\x18\x19\n\x0b\n\x04\x04\
    \x04\x02\x01\x12\x03\x1f\x02\x1c\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03\
    \x1f\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1f\x0b\x11\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03\x1f\x12\x17\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03\x1f\x1a\x1b\n\n\n\x02\x04\x05\x12\x04\"\01\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03\"\x08\x12\n\x0b\n\x04\x04\x05\x02\0\x12\x03#\x02\
    \x1e\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x03#\x0b\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\x14\
    \x19\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03#\x1c\x1d\n.\n\x04\x04\x05\x02\
    \x01\x12\x03%\x02\x1c\x1a!\x20Text-format\x20serialized\x20NetDefs.\n\n\
    \x0c\n\x05\x04\x05\x02\x01\x04\x12\x03%\x02\n\n\x0c\n\x05\x04\x05\x02\
    \x01\x06\x12\x03%\x0b\x12\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03%\x13\
    \x17\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03%\x1a\x1b\n\x87\x01\n\x04\
    \x04\x05\x02\x02\x12\x03)\x02#\x1az\x20Info\x20about\x20where\x20the\x20\
    model\x20comes\x20from.\x20Possible\x20use\x20cases:\n\x201)\x20sanity\
    \x20check\x20or\x20diagnose\n\x202)\x20provide\x20info\x20for\x20evaluat\
    ion.\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03)\x02\n\n\x0c\n\x05\x04\
    \x05\x02\x02\x06\x12\x03)\x0b\x14\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\
    \x03)\x15\x1e\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03)!\"\n\x0b\n\x04\
    \x04\x05\x02\x03\x12\x03*\x02\x1e\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\
    \x03*\x02\n\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03*\x0b\x13\n\x0c\n\x05\
    \x04\x05\x02\x03\x01\x12\x03*\x14\x19\n\x0c\n\x05\x04\x05\x02\x03\x03\
    \x12\x03*\x1c\x1d\n\x0b\n\x04\x04\x05\x02\x04\x12\x03+\x021\n\x0c\n\x05\
    \x04\x05\x02\x04\x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x05\x02\x04\x06\x12\
    \x03+\x0b\x14\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03+\x15,\n\x0c\n\x05\
    \x04\x05\x02\x04\x03\x12\x03+/0\n\x0b\n\x04\x04\x05\x02\x05\x12\x03,\x02\
    !\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x05\x02\
    \x05\x05\x12\x03,\x0b\x11\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03,\x12\
    \x1c\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03,\x1f\x20\n\x0b\n\x04\x04\
    \x05\x02\x06\x12\x03-\x02#\n\x0c\n\x05\x04\x05\x02\x06\x04\x12\x03-\x02\
    \n\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03-\x0b\x11\n\x0c\n\x05\x04\x05\
    \x02\x06\x01\x12\x03-\x12\x1e\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03-!\
    \"\n\x0b\n\x04\x04\x05\x02\x07\x12\x03.\x023\n\x0c\n\x05\x04\x05\x02\x07\
    \x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x05\x02\x07\x06\x12\x03.\x0b\x1c\n\
    \x0c\n\x05\x04\x05\x02\x07\x01\x12\x03.\x1d.\n\x0c\n\x05\x04\x05\x02\x07\
    \x03\x12\x03.12\n\x0b\n\x04\x04\x05\x02\x08\x12\x03/\x02,\n\x0c\n\x05\
    \x04\x05\x02\x08\x04\x12\x03/\x02\n\n\x0c\n\x05\x04\x05\x02\x08\x05\x12\
    \x03/\x0b\x11\n\x0c\n\x05\x04\x05\x02\x08\x01\x12\x03/\x12'\n\x0c\n\x05\
    \x04\x05\x02\x08\x03\x12\x03/*+\n\x0b\n\x04\x04\x05\x02\t\x12\x030\x02$\
    \n\x0c\n\x05\x04\x05\x02\t\x04\x12\x030\x02\n\n\x0c\n\x05\x04\x05\x02\t\
    \x06\x12\x030\x0b\x14\n\x0c\n\x05\x04\x05\x02\t\x01\x12\x030\x15\x1e\n\
    \x0c\n\x05\x04\x05\x02\t\x03\x12\x030!#\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
