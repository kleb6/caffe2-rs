// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pytorch/caffe2/proto/caffe2_legacy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct CaffeDatum {
    // message fields
    channels: ::std::option::Option<i32>,
    height: ::std::option::Option<i32>,
    width: ::std::option::Option<i32>,
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    label: ::std::option::Option<i32>,
    pub float_data: ::std::vec::Vec<f32>,
    encoded: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CaffeDatum {
    fn default() -> &'a CaffeDatum {
        <CaffeDatum as ::protobuf::Message>::default_instance()
    }
}

impl CaffeDatum {
    pub fn new() -> CaffeDatum {
        ::std::default::Default::default()
    }

    // optional int32 channels = 1;


    pub fn get_channels(&self) -> i32 {
        self.channels.unwrap_or(0)
    }
    pub fn clear_channels(&mut self) {
        self.channels = ::std::option::Option::None;
    }

    pub fn has_channels(&self) -> bool {
        self.channels.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: i32) {
        self.channels = ::std::option::Option::Some(v);
    }

    // optional int32 height = 2;


    pub fn get_height(&self) -> i32 {
        self.height.unwrap_or(0)
    }
    pub fn clear_height(&mut self) {
        self.height = ::std::option::Option::None;
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = ::std::option::Option::Some(v);
    }

    // optional int32 width = 3;


    pub fn get_width(&self) -> i32 {
        self.width.unwrap_or(0)
    }
    pub fn clear_width(&mut self) {
        self.width = ::std::option::Option::None;
    }

    pub fn has_width(&self) -> bool {
        self.width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i32) {
        self.width = ::std::option::Option::Some(v);
    }

    // optional bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 label = 5;


    pub fn get_label(&self) -> i32 {
        self.label.unwrap_or(0)
    }
    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: i32) {
        self.label = ::std::option::Option::Some(v);
    }

    // repeated float float_data = 6;


    pub fn get_float_data(&self) -> &[f32] {
        &self.float_data
    }
    pub fn clear_float_data(&mut self) {
        self.float_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_float_data(&mut self, v: ::std::vec::Vec<f32>) {
        self.float_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_float_data(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.float_data
    }

    // Take field
    pub fn take_float_data(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.float_data, ::std::vec::Vec::new())
    }

    // optional bool encoded = 7;


    pub fn get_encoded(&self) -> bool {
        self.encoded.unwrap_or(false)
    }
    pub fn clear_encoded(&mut self) {
        self.encoded = ::std::option::Option::None;
    }

    pub fn has_encoded(&self) -> bool {
        self.encoded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encoded(&mut self, v: bool) {
        self.encoded = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CaffeDatum {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.channels = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.width = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.label = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.float_data)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.encoded = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.channels {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.height {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.width {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.label {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += 5 * self.float_data.len() as u32;
        if let Some(v) = self.encoded {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.channels {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.height {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.width {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(v) = self.label {
            os.write_int32(5, v)?;
        }
        for v in &self.float_data {
            os.write_float(6, *v)?;
        };
        if let Some(v) = self.encoded {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CaffeDatum {
        CaffeDatum::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "channels",
                |m: &CaffeDatum| { &m.channels },
                |m: &mut CaffeDatum| { &mut m.channels },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &CaffeDatum| { &m.height },
                |m: &mut CaffeDatum| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "width",
                |m: &CaffeDatum| { &m.width },
                |m: &mut CaffeDatum| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &CaffeDatum| { &m.data },
                |m: &mut CaffeDatum| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "label",
                |m: &CaffeDatum| { &m.label },
                |m: &mut CaffeDatum| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "float_data",
                |m: &CaffeDatum| { &m.float_data },
                |m: &mut CaffeDatum| { &mut m.float_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "encoded",
                |m: &CaffeDatum| { &m.encoded },
                |m: &mut CaffeDatum| { &mut m.encoded },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CaffeDatum>(
                "CaffeDatum",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CaffeDatum {
        static instance: ::protobuf::rt::LazyV2<CaffeDatum> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CaffeDatum::new)
    }
}

impl ::protobuf::Clear for CaffeDatum {
    fn clear(&mut self) {
        self.channels = ::std::option::Option::None;
        self.height = ::std::option::Option::None;
        self.width = ::std::option::Option::None;
        self.data.clear();
        self.label = ::std::option::Option::None;
        self.float_data.clear();
        self.encoded = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CaffeDatum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaffeDatum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LegacyPadding {
    NOTSET = 0,
    VALID = 1,
    SAME = 2,
    CAFFE_LEGACY_POOLING = 3,
}

impl ::protobuf::ProtobufEnum for LegacyPadding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LegacyPadding> {
        match value {
            0 => ::std::option::Option::Some(LegacyPadding::NOTSET),
            1 => ::std::option::Option::Some(LegacyPadding::VALID),
            2 => ::std::option::Option::Some(LegacyPadding::SAME),
            3 => ::std::option::Option::Some(LegacyPadding::CAFFE_LEGACY_POOLING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LegacyPadding] = &[
            LegacyPadding::NOTSET,
            LegacyPadding::VALID,
            LegacyPadding::SAME,
            LegacyPadding::CAFFE_LEGACY_POOLING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LegacyPadding>("LegacyPadding", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LegacyPadding {
}

impl ::std::default::Default for LegacyPadding {
    fn default() -> Self {
        LegacyPadding::NOTSET
    }
}

impl ::protobuf::reflect::ProtobufValue for LegacyPadding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(pytorch/caffe2/proto/caffe2_legacy.proto\x12\x06caffe2\"\xc0\x01\n\nC\
    affeDatum\x12\x1a\n\x08channels\x18\x01\x20\x01(\x05R\x08channels\x12\
    \x16\n\x06height\x18\x02\x20\x01(\x05R\x06height\x12\x14\n\x05width\x18\
    \x03\x20\x01(\x05R\x05width\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\x04d\
    ata\x12\x14\n\x05label\x18\x05\x20\x01(\x05R\x05label\x12\x1d\n\nfloat_d\
    ata\x18\x06\x20\x03(\x02R\tfloatData\x12\x1f\n\x07encoded\x18\x07\x20\
    \x01(\x08:\x05falseR\x07encoded*J\n\rLegacyPadding\x12\n\n\x06NOTSET\x10\
    \0\x12\t\n\x05VALID\x10\x01\x12\x08\n\x04SAME\x10\x02\x12\x18\n\x14CAFFE\
    _LEGACY_POOLING\x10\x03J\xcf\x12\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\xa1\x01\n\x02\x04\0\
    \x12\x04\x06\0\x11\x01\x1a\x94\x01\x20Original\x20Caffe1\x20Datum\x20cop\
    y:\x20this\x20is\x20used\x20in\x20image\x20input\x20op\x20to\x20allow\
    \x20us\x20to\n\x20load\x20caffe1\x20serialized\x20datum\x20without\x20ha\
    ving\x20to\x20regenerate\x20the\x20database.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x06\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x1e\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\x07\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x07\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x11\x19\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07\x1c\x1d\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x08\x02\x1c\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x08\x02\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x08\x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x08\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x1a\x1b\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\t\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\t\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x0b\x10\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\t\x11\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\t\x19\x1a\n.\n\x04\x04\0\x02\x03\x12\x03\x0b\x02\x1a\x1a!\x20the\
    \x20actual\x20image\x20data,\x20in\x20bytes\n\n\x0c\n\x05\x04\0\x02\x03\
    \x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x0b\x10\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x11\x15\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0b\x18\x19\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0c\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x0c\x11\x16\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0c\x19\x1a\n@\n\x04\
    \x04\0\x02\x05\x12\x03\x0e\x02\x20\x1a3\x20Optionally,\x20the\x20datum\
    \x20could\x20also\x20hold\x20float\x20data.\n\n\x0c\n\x05\x04\0\x02\x05\
    \x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0e\x0b\x10\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\x11\x1b\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x0e\x1e\x1f\nM\n\x04\x04\0\x02\x06\x12\x03\x10\x02.\x1a\
    @\x20If\x20true\x20data\x20contains\x20an\x20encoded\x20image\x20that\
    \x20need\x20to\x20be\x20decoded\n\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\
    \x10\x02\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x10\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\x10\x10\x17\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x10\x1a\x1b\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x03\x10\x1c-\n\x0c\n\
    \x05\x04\0\x02\x06\x07\x12\x03\x10',\n\n\n\x02\x05\0\x12\x04\x13\01\x01\
    \n\n\n\x03\x05\0\x01\x12\x03\x13\x05\x12\n7\n\x04\x05\0\x02\0\x12\x03\
    \x14\x02\r\"*\x20Do\x20not\x20use\x20old-stype\x20padding\x20strategies.\
    \n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x14\x02\x08\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03\x14\x0b\x0c\n\x8a\x05\n\x04\x05\0\x02\x01\x12\x03\"\x02\
    \x0c\x1a\xfc\x04\x20VALID\x20and\x20SAME\x20are\x20two\x20strategies\x20\
    adopted\x20in\x20Google\x20DistBelief:\x20it\x20forces\n\x20the\x20input\
    \x20shape\x20as\x20follows.\x20For\x20SAME,\x20the\x20output\x20is:\n\
    \x20\x20\x20R_out\x20=\x20ceil(float(R)\x20/\x20float(S))\n\x20\x20\x20C\
    _out\x20=\x20ceil(float(C)\x20/\x20float(S))\n\x20where\x20R\x20and\x20C\
    \x20are\x20row\x20and\x20column,\x20S\x20is\x20the\x20stride,\x20and\x20\
    K\x20is\x20the\x20kernel.\n\x20The\x20number\x20of\x20padded\x20pixels\
    \x20is\x20then\x20computed\x20as\n\x20\x20\x20Pr\x20=\x20((R_out\x20-\
    \x201)\x20*\x20S\x20+\x20K\x20-\x20R)\n\x20\x20\x20Pc\x20=\x20((C_out\
    \x20-\x201)\x20*\x20S\x20+\x20K\x20-\x20C)\n\x20When\x20Pr\x20and\x20Pc\
    \x20are\x20even\x20numbers,\x20both\x20sides\x20(left\x20and\x20right,\
    \x20or\x20top\x20and\n\x20bottom)\x20get\x20half\x20each.\x20When\x20Pr\
    \x20and\x20Pc\x20are\x20odd\x20numbers,\x20the\x20right\x20and\x20the\n\
    \x20bottom\x20gets\x20the\x20one\x20additional\x20padding\x20pixel.\n\
    \x20For\x20VALID,\x20padding\x20values\x20of\x200\x20are\x20always\x20us\
    ed.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\"\x02\x07\n\x0c\n\x05\x05\0\
    \x02\x01\x02\x12\x03\"\n\x0b\n\x0b\n\x04\x05\0\x02\x02\x12\x03#\x02\x0b\
    \n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03#\x02\x06\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03#\t\n\n\x8c\x05\n\x04\x05\0\x02\x03\x12\x030\x02\x1b\x1a\
    \xfe\x04\x20CAFFE_LEGACY_POOLING\x20is\x20a\x20flag\x20that\x20notifies\
    \x20the\x20code\x20to\x20use\x20the\x20old\x20Caffe\n\x20padding\x20stra\
    tegy.\n\x20Basically,\x20in\x20caffe2,\x20after\x20padding\x20the\x20con\
    volution\x20and\x20pooling\x20use\x20the\n\x20same\x20computation\x20str\
    ategy:\x20half-windows\x20at\x20the\x20right\x20and\x20bottom\x20are\n\
    \x20discarded.\x20In\x20Caffe,\x20convolution\x20follows\x20this\x20stra\
    tegy\x20but\x20if\x20there\x20are\n\x20some\x20pixels\x20in\x20the\x20ha\
    lf-windows,\x20the\x20pooling\x20layer\x20will\x20actually\x20put\x20one\
    \n\x20additional\x20output.\x20If\x20you\x20set\x20LegacyPadding\x20to\
    \x20this,\x20we\x20will\x20compute\x20the\n\x20equivalent\x20padding\x20\
    strategy\x20in\x20caffe2\x20so\x20that\x20the\x20output\x20size\x20is\n\
    \x20backward\x20compatible\x20with\x20Caffe.\n\x20THIS\x20IS\x20NOW\x20D\
    EPRECATED.\x20ANY\x20non-conventional\x20use\x20has\x20to\x20be\x20manua\
    lly\n\x20converted.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x030\x02\x16\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x030\x19\x1a\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
